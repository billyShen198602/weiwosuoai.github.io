<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen&#39;s Blog</title>
  <subtitle>当你的才华还撑不起你的野心时，你就应该静下心来学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jiangbing.me/"/>
  <updated>2016-05-22T07:21:23.276Z</updated>
  <id>http://www.jiangbing.me/</id>
  
  <author>
    <name>江冰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android ListView 常用技巧总结</title>
    <link href="http://www.jiangbing.me/2016/04/11/2016-04-11-listview-common-sense-tip1/"/>
    <id>http://www.jiangbing.me/2016/04/11/2016-04-11-listview-common-sense-tip1/</id>
    <published>2016-04-11T02:55:08.000Z</published>
    <updated>2016-05-22T07:21:23.276Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文对 &lt;code&gt;ListView&lt;/code&gt; 中的一些常用技巧做一个总结。&lt;font color=&quot;blue&quot;&gt;附:虽然现在 &lt;code&gt;RecyclerView&lt;/code&gt; 已逐渐取代 &lt;code&gt;ListView&lt;/code&gt;,但实际情况是大部分项目中还在使用 &lt;code&gt;ListView&lt;/code&gt;。当然，后续我会在我的博客中详细介绍 &lt;code&gt;RecyclerView&lt;/code&gt;,敬请期待。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; 作为 Android 中常用的列表控件，用以向用户展示列表信息。可以说，我们开发的项目中 &lt;code&gt;listView&lt;/code&gt; 随处可见，也是 Android 程序员面试时，最常被问的一个知识点，下面我就将 &lt;code&gt;listView&lt;/code&gt; 中的常用技巧一一罗列出来。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;listView-的缓存机制以及-ViewHolder-的使用&quot;&gt;&lt;a href=&quot;#listView-的缓存机制以及-ViewHolder-的使用&quot; class=&quot;headerlink&quot; title=&quot;listView 的缓存机制以及 ViewHolder 的使用&quot;&gt;&lt;/a&gt;listView 的缓存机制以及 ViewHolder 的使用&lt;/h2&gt;&lt;p&gt;这两个知识点是最常用的优化 listView 的技巧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.首先，来说说 listView 的缓存机制，再这之前，我们先看看下面这张图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016052200.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我先来说一下这张图的意思，从左边第一张图开始，当我们的手机上显示一个 listView 列表的时候，如图有 7 个 item,当我们向上拖动 listView，进入第二个示意图，注意细节，第二个图例表示的是，当向上拖动时，这是 item00 正准备消失在手机屏幕上但还没有完全消失时，item07 出现在我们的视野内，这时，item07 也只是显示一半，这种情况下，item07 还不是从缓存中复用的 item,而是重新 new 的一个 View.我们继续向上拖动，到了第三个图例，这时 item00 已经完全消失在屏幕上，这时系统不会销毁这 item00,而是将其放到了缓存中，那么当我们继续向上滑动时，我们就可以利用 listView 的 &lt;em&gt;缓存机制&lt;/em&gt;，复用缓存中 item,用它显示 item08,而不是再次的重新 new 一个.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.通过 &lt;em&gt;缓存机制&lt;/em&gt; 和 ViewHolder 配合使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知道了 &lt;em&gt;缓存机制&lt;/em&gt;，我们还需要知道 ViewHolder,这时 Google 大会上推荐我们使用的 listView 优化方案。&lt;/p&gt;
&lt;p&gt;我们知道，我们通常写的视图 xml 文件，实际上是一个 DOM 树结构，而 findViewById() 实际上是遍历整个视图树，当你的 listView 中的 item 非常复杂时，findViewById() 所需的时间就越长，这是非常耗性能的。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TextView title; &lt;span class=&quot;comment&quot;&gt;// The title of item.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ImageView img;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以在第一次创建 listView 中的 item 的同时，创建一个 ViewHolder,将需要遍历的视图保存在其中，通过 &lt;code&gt;View.setTag()&lt;/code&gt; 保存在缓存中，这样下次重用的时候就避免的再次 findViewById() 的操作了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;red&quot;&gt;注意：这样做虽然消耗了一些内存，但是与 findViewById() 遍历所需的时间相比，显得微不足道。(据测试，使用 ViewHolder,效率提高 50%)&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3.示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position, View convertView, ViewGroup parent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ViewHolder viewHolder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否存在缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (convertView == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        convertView = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mInflater.inflate(R.layout.item_lv_weixn_about, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewHolder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ViewHolder(convertView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        convertView.setTag(viewHolder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 若有，取出缓存中存放的 ViewHolder,避免再次 findViewById().&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewHolder = (ViewHolder) convertView.getTag();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 更新视图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewHolder.title.setText(mStrArr[position]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; convertView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;设置-listView-中的分割线&quot;&gt;&lt;a href=&quot;#设置-listView-中的分割线&quot; class=&quot;headerlink&quot; title=&quot;设置 listView 中的分割线&quot;&gt;&lt;/a&gt;设置 listView 中的分割线&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;android:divider&lt;/code&gt; 和 &lt;code&gt;android:dividerHeight&lt;/code&gt; 这两个属性，我们可以设置设置分割线。另外，除了为分割线设置颜色以外，我们还可以为其设置图片资源：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:divider=&quot;@drawable:split_pic&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:dividerHeight=&quot;1dp&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;隐藏-listView-的滚动条&quot;&gt;&lt;a href=&quot;#隐藏-listView-的滚动条&quot; class=&quot;headerlink&quot; title=&quot;隐藏 listView 的滚动条&quot;&gt;&lt;/a&gt;隐藏 listView 的滚动条&lt;/h2&gt;&lt;p&gt;我们在拖动 listView 时，默认情况下是有滚动条的，我们可以通过设置 &lt;code&gt;scrollbars&lt;/code&gt; 属性来控制滚动条的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:scrollbars=&quot;none&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置为 &lt;code&gt;none&lt;/code&gt;,则不会出现滚动条。&lt;/p&gt;
&lt;h3 id=&quot;取消-listView-的-item-的点击效果&quot;&gt;&lt;a href=&quot;#取消-listView-的-item-的点击效果&quot; class=&quot;headerlink&quot; title=&quot;取消 listView 的 item 的点击效果&quot;&gt;&lt;/a&gt;取消 listView 的 item 的点击效果&lt;/h3&gt;&lt;p&gt;listView 默认下，但我们点击其中的 item 时，会有点击效果。通过设置 &lt;code&gt;listSelector&lt;/code&gt; 属性来取消点击效果。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:listSelector=&quot;#00000000&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你还可以使用 Android 自带的透明色来实现这个效果：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:listSelector=&quot;@android:color/transparent&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;设置-listView-需要显示在其中某一项&quot;&gt;&lt;a href=&quot;#设置-listView-需要显示在其中某一项&quot; class=&quot;headerlink&quot; title=&quot;设置 listView 需要显示在其中某一项&quot;&gt;&lt;/a&gt;设置 listView 需要显示在其中某一项&lt;/h3&gt;&lt;p&gt;listView 默认情况下是显示在第一项的，&lt;em&gt;有时候，需求是显示在指定项，那么要如何实现呢？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;代码控制：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;listView.setSelection(position)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过制定 position,来设置需要显示在第几项。但是，这种滑动操作是瞬间完成的，有时候，我们的需求是 &lt;em&gt;平滑&lt;/em&gt; 的滑动到某个位置，通过下面的代码可以实现这种效果：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mListView.smoothScrollBy(distance, duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mListView.smoothScrollByOffset(offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mListView.smoothScrollToPosition(index);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;动态修改-listView&quot;&gt;&lt;a href=&quot;#动态修改-listView&quot; class=&quot;headerlink&quot; title=&quot;动态修改 listView&quot;&gt;&lt;/a&gt;动态修改 listView&lt;/h2&gt;&lt;p&gt;listView 中的数据通常情况下，在做了某种操作后，需要动态更新，&lt;em&gt;如何实现这种功能呢&lt;/em&gt;？&lt;/p&gt;
&lt;p&gt;通过更新 listView 中的数据源，一般情况下都是一个 &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;,我们通过向 list 中添加数据，然后调用 &lt;code&gt;mAdapter.notifyDataSetChanged()&lt;/code&gt; 方法，就能实现 listView 的动态更新了。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mData.add(&lt;span class=&quot;string&quot;&gt;&quot;info&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;遍历-listView-中的-item&quot;&gt;&lt;a href=&quot;#遍历-listView-中的-item&quot; class=&quot;headerlink&quot; title=&quot;遍历 listView 中的 item&quot;&gt;&lt;/a&gt;遍历 listView 中的 item&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;getChildAt()&lt;/code&gt; 来获取某个 View:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; mListView.getChildCount(); i++=) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	View view = mListView.getChildAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;交互，当-listView-为空时&quot;&gt;&lt;a href=&quot;#交互，当-listView-为空时&quot; class=&quot;headerlink&quot; title=&quot;交互，当 listView 为空时&quot;&gt;&lt;/a&gt;交互，当 listView 为空时&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文对 &lt;code&gt;ListView&lt;/code&gt; 中的一些常用技巧做一个总结。&lt;font color=&#39;blue&#39;&gt;附:虽然现在 &lt;code&gt;RecyclerView&lt;/code&gt; 已逐渐取代 &lt;code&gt;ListView&lt;/code&gt;,但实际情况是大部分项目中还在使用 &lt;code&gt;ListView&lt;/code&gt;。当然，后续我会在我的博客中详细介绍 &lt;code&gt;RecyclerView&lt;/code&gt;,敬请期待。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; 作为 Android 中常用的列表控件，用以向用户展示列表信息。可以说，我们开发的项目中 &lt;code&gt;listView&lt;/code&gt; 随处可见，也是 Android 程序员面试时，最常被问的一个知识点，下面我就将 &lt;code&gt;listView&lt;/code&gt; 中的常用技巧一一罗列出来。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="ListView" scheme="http://www.jiangbing.me/tags/ListView/"/>
    
  </entry>
  
  <entry>
    <title>Android 注解框架之 ButterKnife</title>
    <link href="http://www.jiangbing.me/2016/04/07/2016-04-07-butterknife/"/>
    <id>http://www.jiangbing.me/2016/04/07/2016-04-07-butterknife/</id>
    <published>2016-04-07T02:55:08.000Z</published>
    <updated>2016-05-14T02:41:48.976Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;ButterKnife（黄油刀） 是大名鼎鼎的 &lt;a href=&quot;https://github.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JakeWharton&lt;/a&gt;大神 所写的注解框架，目的是为了将我们从大量的 &lt;code&gt;findViewById()&lt;/code&gt; 和 监听类中解脱出来，从而将更多的关注点在业务需求上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051000.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ButterKnife 是一个通过注解的方式将 &lt;em&gt;变量&lt;/em&gt; 和 &lt;em&gt;方法&lt;/em&gt; 与 Android 视图绑定的框架。&lt;/p&gt;
&lt;p&gt;使用 ButterKnife,我们能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;@BindView&lt;/code&gt; 替代大量的 &lt;code&gt;findViewById()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;在 list 和 array 中组织多个视图，并能够即时通过 actions, setters 或者 properties 来操作它们;&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;@OnClick&lt;/code&gt; 或别的注解方式来替代大量的监听内部类;&lt;/li&gt;
&lt;li&gt;通过资源注解替代资源查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面一节我们具体细说。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何在项目中使用？&quot;&gt;&lt;a href=&quot;#如何在项目中使用？&quot; class=&quot;headerlink&quot; title=&quot;如何在项目中使用？&quot;&gt;&lt;/a&gt;如何在项目中使用？&lt;/h2&gt;&lt;p&gt;本文只说在 Android Studio 中如何来使用（你要问我为什么不把 eclipse 中使用的方法也写上来，我只想说，大兄弟，弃了 eclipse 吧！）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1.第一步：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;项目根目录的 &lt;code&gt;build.gradle&lt;/code&gt; 文件的 dependencies 中添加 &lt;code&gt;classpath &amp;#39;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;#39;&lt;/code&gt;，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2.第二步：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;app 目录下的 &lt;code&gt;build.gradle&lt;/code&gt; 中配置 &lt;code&gt;apply plugin: &amp;#39;com.neenbedankt.android-apt&amp;#39;&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;dependencies 中配置：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.jakewharton:butterknife:8.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt &lt;span class=&quot;string&quot;&gt;&#39;com.jakewharton:butterknife-compiler:8.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.jakewharton:butterknife-annotations:8.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.support:support-annotations:23.3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051002.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;懒人必备：ButterKnifeZelezny-插件&quot;&gt;&lt;a href=&quot;#懒人必备：ButterKnifeZelezny-插件&quot; class=&quot;headerlink&quot; title=&quot;懒人必备：ButterKnifeZelezny 插件&quot;&gt;&lt;/a&gt;懒人必备：ButterKnifeZelezny 插件&lt;/h2&gt;&lt;font color=&quot;blue&quot;&gt;功能介绍：帮助我们快速生成布局文件中的 view 对应的变量，省时省力。&lt;/font&gt;

&lt;p&gt;&lt;em&gt;点击 Setting -&amp;gt; Plugins -&amp;gt; Browse repositores&lt;/em&gt;;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051003.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，在搜索框中输入 butterknife,搜索列表中人气最高的就是 ButterKnifeZelezny 插件，点击右边的 安装 按钮，安装完成后，重启 Android studio 即可使用该插件了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如何使用插件？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在需要自动生成绑定关系的 布局文件（如：&lt;code&gt;R.layout.main&lt;/code&gt;） 上 &lt;strong&gt;右键&lt;/strong&gt;, 点击 &lt;em&gt;Generate -&amp;gt; Generate Butterknife Injections&lt;/em&gt;, 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051004.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在窗口中选中，需要生成的变量，点击 confirm 即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051005.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;@BindView&lt;/code&gt;, ButterKnife 能够自动的在相应的 layout 中查找到对应的 id,并与注解的变量绑定在一起。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.title) TextView title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.subtitle) TextView subtitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.footer) TextView footer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.simple_activity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO Use fields...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ButterKnife 并不是运用反射的原理，视图与变量的绑定是在编译时动态生成代码，原理是通过 &lt;code&gt;bind&lt;/code&gt; 委托，上面的注解会变成如下所示的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ExampleActivity activity)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  activity.subtitle = (android.widget.TextView) activity.findViewById(&lt;span class=&quot;number&quot;&gt;2130968578&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  activity.footer = (android.widget.TextView) activity.findViewById(&lt;span class=&quot;number&quot;&gt;2130968579&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  activity.title = (android.widget.TextView) activity.findViewById(&lt;span class=&quot;number&quot;&gt;2130968577&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Resource-绑定&quot;&gt;&lt;a href=&quot;#Resource-绑定&quot; class=&quot;headerlink&quot; title=&quot;Resource 绑定&quot;&gt;&lt;/a&gt;Resource 绑定&lt;/h3&gt;&lt;p&gt;通过预定义的注解与相应的字段绑定，如 &lt;code&gt;@BindBool&lt;/code&gt;, &lt;code&gt;@BindColor&lt;/code&gt;, &lt;code&gt;@BindDimen&lt;/code&gt;, &lt;code&gt;@BindDrawable&lt;/code&gt;, &lt;code&gt;@BindInt&lt;/code&gt;, &lt;code&gt;@BindString&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindString&lt;/span&gt;(R.string.title) String title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindDrawable&lt;/span&gt;(R.drawable.graphic) Drawable graphic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindColor&lt;/span&gt;(R.color.red) &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; red; &lt;span class=&quot;comment&quot;&gt;// int or ColorStateList field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindDimen&lt;/span&gt;(R.dimen.spacer) Float spacer; &lt;span class=&quot;comment&quot;&gt;// int (for pixel size) or float (for exact value) field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;非-Activity-如何绑定&quot;&gt;&lt;a href=&quot;#非-Activity-如何绑定&quot; class=&quot;headerlink&quot; title=&quot;非 Activity 如何绑定&quot;&gt;&lt;/a&gt;非 Activity 如何绑定&lt;/h3&gt;&lt;p&gt;你可以在提供的根视图的任何对象内执行绑定，例如下面的 fragment:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyFragment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fragment&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.button1) Button button1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.button2) Button button2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View view = inflater.inflate(R.layout.fancy_fragment, container, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO Use fields...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在 list adapter 中，你可以通过 ViewHolder 的方式:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position, View view, ViewGroup parent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ViewHolder holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (view != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      holder = (ViewHolder) view.getTag();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      view = inflater.inflate(R.layout.whatever, parent, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      holder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ViewHolder(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      view.setTag(holder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    holder.name.setText(&lt;span class=&quot;string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// etc...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.title) TextView name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.job_title) TextView jobTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;View-List&quot;&gt;&lt;a href=&quot;#View-List&quot; class=&quot;headerlink&quot; title=&quot;View List&quot;&gt;&lt;/a&gt;View List&lt;/h3&gt;&lt;p&gt;你可以将多个 view 放到一个 &lt;em&gt;list&lt;/em&gt; 或者 &lt;em&gt;数组&lt;/em&gt; 中。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@BindViews&lt;/span&gt;(&amp;#123; R.id.first_name, R.id.middle_name, R.id.last_name &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;EditText&amp;gt; nameViews;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;apply()&lt;/code&gt; 能够让你即时改变所有 view 的行为。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, DISABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, ENABLED, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Action&lt;/code&gt; 和 &lt;code&gt;Setter&lt;/code&gt; 接口也同样能够允许你指定一些简单的行为。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ButterKnife.Action&amp;lt;View&amp;gt; DISABLE = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ButterKnife.Action&amp;lt;View&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.setEnabled(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ButterKnife.Setter&amp;lt;View, Boolean&amp;gt; ENABLED = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ButterKnife.Setter&amp;lt;View, Boolean&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, Boolean value, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.setEnabled(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Android 中的一些&lt;em&gt;属性&lt;/em&gt;也能够被使用在 &lt;code&gt;apply()&lt;/code&gt; 方法中：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, View.ALPHA, &lt;span class=&quot;number&quot;&gt;0.0f&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Listener-绑定&quot;&gt;&lt;a href=&quot;#Listener-绑定&quot; class=&quot;headerlink&quot; title=&quot;Listener 绑定&quot;&gt;&lt;/a&gt;Listener 绑定&lt;/h3&gt;&lt;p&gt;Listeners 同样能够动态的配置到某个方法上:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.submit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TODO submit data to server...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有监听方法中的参数都是可选择的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.submit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TODO submit data to server...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在方法中指定一个类型：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.submit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Button button)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  button.setText(&lt;span class=&quot;string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将多个 ID 指定为用同一个方法处理：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(&amp;#123; R.id.door1, R.id.door2, R.id.door3 &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pickDoor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DoorView door)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (door.hasPrizeBehind()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toast.makeText(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;You win!&quot;&lt;/span&gt;, LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toast.makeText(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Try again&quot;&lt;/span&gt;, LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;自定义类型的 View 可以不用指定 ID 来绑定到 &lt;code&gt;listener&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyButton&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO do something!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;绑定重置&quot;&gt;&lt;a href=&quot;#绑定重置&quot; class=&quot;headerlink&quot; title=&quot;绑定重置&quot;&gt;&lt;/a&gt;绑定重置&lt;/h3&gt;&lt;p&gt;相比较 &lt;code&gt;Activity&lt;/code&gt;, &lt;code&gt;Fragment&lt;/code&gt; 拥有不同的生命周期方法。当你在 &lt;code&gt;onCreateView()&lt;/code&gt; 绑定了一个 &lt;code&gt;fragment&lt;/code&gt;, 在 &lt;code&gt;onDestroyView()&lt;/code&gt; 方法中将 &lt;code&gt;view&lt;/code&gt; 设置为 &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当你调用 &lt;code&gt;bind()&lt;/code&gt; 方法时，ButterKnife 会返回一个 &lt;code&gt;Unbinder&lt;/code&gt; 实例，你只需要调用其 &lt;code&gt;unbind()&lt;/code&gt; 方法即可解绑。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyFragment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fragment&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.button1) Button button1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.button2) Button button2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Unbinder unbinder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View view = inflater.inflate(R.layout.fancy_fragment, container, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unbinder = ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO Use fields...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDestroyView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onDestroyView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unbinder.unbind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;选择性绑定&quot;&gt;&lt;a href=&quot;#选择性绑定&quot; class=&quot;headerlink&quot; title=&quot;选择性绑定&quot;&gt;&lt;/a&gt;选择性绑定&lt;/h3&gt;&lt;p&gt;默认情况下，&lt;em&gt;@Bind&lt;/em&gt; 和 &lt;em&gt;监听绑定&lt;/em&gt; 都是需要的，但是当目标视图不存在时，会抛异常。&lt;/p&gt;
&lt;p&gt;为了防止它出现，我们可以在绑定的变量上加上 &lt;code&gt;@Nullable&lt;/code&gt; 注解或者在方法上加上 &lt;code&gt;@Optional&lt;/code&gt; 注解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;@Nullable&lt;/code&gt; 可以被使用在任何变量上，你只需导入 &lt;em&gt;“supprot-annotations”&lt;/em&gt; 依赖即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Nullable annotation from Android&#39;s &quot;support-annotations&quot; library.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // TODO ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多个方法监听&quot;&gt;&lt;a href=&quot;#多个方法监听&quot; class=&quot;headerlink&quot; title=&quot;多个方法监听&quot;&gt;&lt;/a&gt;多个方法监听&lt;/h3&gt;&lt;p&gt;每个方法也可以绑定多个回调方法，这些方法有一个默认的回调，你也可以通过 &lt;code&gt;callback&lt;/code&gt; 参数来指定替代的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnItemSelected&lt;/span&gt;(R.id.list_view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onItemSelected&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TODO ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnItemSelected&lt;/span&gt;(value = R.id.maybe_missing, callback = NOTHING_SELECTED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNothingSelected&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TODO ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;彩蛋&quot;&gt;&lt;a href=&quot;#彩蛋&quot; class=&quot;headerlink&quot; title=&quot;彩蛋&quot;&gt;&lt;/a&gt;彩蛋&lt;/h3&gt;&lt;p&gt;ButterKnife 还提供了 &lt;code&gt;findById()&lt;/code&gt; 方法，通过它，你也能够在布局文件中找到相应的 &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;Activity&lt;/code&gt;, &lt;code&gt;Dialog&lt;/code&gt; …&lt;br&gt;此方法通过泛型，来动态对返回值做转换。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;View view = LayoutInflater.from(context).inflate(R.layout.thing, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TextView firstName = ButterKnife.findById(view, R.id.first_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TextView lastName = ButterKnife.findById(view, R.id.last_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImageView photo = ButterKnife.findById(view, R.id.photo);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/JakeWharton/butterknife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jakewharton.github.io/butterknife/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ButterKnife（黄油刀） 是大名鼎鼎的 &lt;a href=&quot;https://github.com/JakeWharton&quot;&gt;JakeWharton&lt;/a&gt;大神 所写的注解框架，目的是为了将我们从大量的 &lt;code&gt;findViewById()&lt;/code&gt; 和 监听类中解脱出来，从而将更多的关注点在业务需求上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016051000.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ButterKnife 是一个通过注解的方式将 &lt;em&gt;变量&lt;/em&gt; 和 &lt;em&gt;方法&lt;/em&gt; 与 Android 视图绑定的框架。&lt;/p&gt;
&lt;p&gt;使用 ButterKnife,我们能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;@BindView&lt;/code&gt; 替代大量的 &lt;code&gt;findViewById()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;在 list 和 array 中组织多个视图，并能够即时通过 actions, setters 或者 properties 来操作它们;&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;@OnClick&lt;/code&gt; 或别的注解方式来替代大量的监听内部类;&lt;/li&gt;
&lt;li&gt;通过资源注解替代资源查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面一节我们具体细说。&lt;br&gt;
    
    </summary>
    
      <category term="Android 开发框架" scheme="http://www.jiangbing.me/categories/Android-%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="注解框架" scheme="http://www.jiangbing.me/tags/%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>说说 Android Studio 下载完成后，我们需要做的事情</title>
    <link href="http://www.jiangbing.me/2016/04/02/2016-04-02-what-should-we-config-it-after-downloaded-the-as/"/>
    <id>http://www.jiangbing.me/2016/04/02/2016-04-02-what-should-we-config-it-after-downloaded-the-as/</id>
    <published>2016-04-02T00:03:53.000Z</published>
    <updated>2016-05-14T06:05:00.062Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;我在之前有两篇介绍 Android Studio 的博文，分别是 &lt;a href=&quot;http://jiangbing.me/2016/01/25/2016-01-25-android-studio-tips-and-tricks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Android Studio 概览》&lt;/a&gt; 和 &lt;a href=&quot;http://jiangbing.me/2016/01/27/2016-01-27-android-studio-preview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《再说说 Android Studio》&lt;/a&gt;，但这两篇基本上都是介绍 Android Studio 的功能，今天这篇将会说说，当我们将 Android Studio 下载完成后，需要对 AS(下面均简称为 AS) 做的配置，以便我们能够方便高效的使用这个开发工具.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;注意：本文后续建立在你已经下好了 AS,且能够正常启动.(至于如何下载，这没什么好说的，自行 Google,百度即可 …)&lt;/strong&gt;&lt;/font&gt;

&lt;h2 id=&quot;1-Gradle-配置文件下载耗时太长的问题&quot;&gt;&lt;a href=&quot;#1-Gradle-配置文件下载耗时太长的问题&quot; class=&quot;headerlink&quot; title=&quot;1.Gradle 配置文件下载耗时太长的问题&quot;&gt;&lt;/a&gt;1.Gradle 配置文件下载耗时太长的问题&lt;/h2&gt;&lt;p&gt;当我们第一次启动 AS，并点击 &lt;em&gt;“Start a new Android Studio project”&lt;/em&gt; 的时候，AS 会自动去下载 Gradle 相关的配置文件，默认下载完成后放置位置在 C:\User\Administrator.gradle 下的 C:\Users\Administrator\gradle\wrapper\dists\gradle-2.1-all\27fdsaorewru2342dsjon45 文件夹，也许你会疑问这一串数字和英文组合的文件夹是什么意思，其实它是随机生成的。&lt;/p&gt;
&lt;p&gt;我们打开这个文件夹，可以看到 gradle-2.1-all.zip 的 .part 文件。拿到这个版本号，我们可以通过第三方下载软件（例如迅雷）去 Google 官方网站去下载。&lt;/p&gt;
&lt;p&gt;下载好 gradle-2.1-all.zip 文件好，无需解压，放到这个奇怪的文件夹下，AS 运行的时候会自动解压。这样就可以为我们节省了很多时间了，再次创建工程的时候只需要下载一些 jcenter 的依赖包即可，而这些文件都很小，不会花费多长时间。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-配置主题（Theme）&quot;&gt;&lt;a href=&quot;#2-配置主题（Theme）&quot; class=&quot;headerlink&quot; title=&quot;2.配置主题（Theme）&quot;&gt;&lt;/a&gt;2.配置主题（Theme）&lt;/h2&gt;&lt;p&gt;配置自己喜欢的主题，会让你编码起来舒心很多。AS 自带的主题包括 Windwons, Intellij, Darcula 等等。就我个人来说黑色系的 Darcula 主题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;具体步骤：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.点击 &lt;strong&gt;设置&lt;/strong&gt; 按钮，如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050500.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.点击 Editor -&amp;gt; Colors &amp;amp; Fonts 来设置字体和字体大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的主题是无法修改的，我们需要点击 Sava as 按钮，通过自命名另一个名字，达到修改的目的。&lt;/p&gt;
&lt;h2 id=&quot;3-代码自动提示&quot;&gt;&lt;a href=&quot;#3-代码自动提示&quot; class=&quot;headerlink&quot; title=&quot;3.代码自动提示&quot;&gt;&lt;/a&gt;3.代码自动提示&lt;/h2&gt;&lt;p&gt;对于使用 eclipse 的开发者来说，习惯了将鼠标指针停留在代码上提示的功能，乍转到 AS,会非常不习惯。&lt;/p&gt;
&lt;p&gt;AS 默认情况下是禁用掉代码提示的功能的，因为这个功能非常耗性能，对于配置不高的电脑，开启这个功能，只能说 “卡爆了”。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如何开启？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;设置 -&amp;gt; Editor -&amp;gt; Other -&amp;gt; show quick doc on mouse move,勾选上，就开启这个功能了。&lt;/p&gt;
&lt;h2 id=&quot;4-代码提示不区分大小写&quot;&gt;&lt;a href=&quot;#4-代码提示不区分大小写&quot; class=&quot;headerlink&quot; title=&quot;4.代码提示不区分大小写&quot;&gt;&lt;/a&gt;4.代码提示不区分大小写&lt;/h2&gt;&lt;p&gt;设置 -&amp;gt; Editor -&amp;gt; General -&amp;gt; Code Completion,在 Code Sensitive completion 里面选择 “None”,这样就开启代码提示不区分大小写了。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050501.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-代码编辑区显示行号&quot;&gt;&lt;a href=&quot;#5-代码编辑区显示行号&quot; class=&quot;headerlink&quot; title=&quot;5.代码编辑区显示行号&quot;&gt;&lt;/a&gt;5.代码编辑区显示行号&lt;/h2&gt;&lt;p&gt;在代码编辑区的左侧，点击鼠标右键，出现 “Show Line Numbers”，勾选上即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050502.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-更新-SDK&quot;&gt;&lt;a href=&quot;#6-更新-SDK&quot; class=&quot;headerlink&quot; title=&quot;6.更新 SDK&quot;&gt;&lt;/a&gt;6.更新 SDK&lt;/h2&gt;&lt;p&gt;点击 SDK Manager 图片，打开它，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050503.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;出现下面的窗口，点击 &lt;em&gt;“Launch Standalone SDK Manager”&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050504.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在没有翻墙的情况下，我们通常会看到 &lt;font color=&quot;red&quot;&gt;Connection refuse&lt;/font&gt; 的提示信息。&lt;/p&gt;
&lt;p&gt;我们需要在 SDK Manager 的菜单栏中选择 Tools -&amp;gt; Options 选项,打开如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050505.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Setting 中输入 “翻墙” 代理的 IP 和端口（&lt;font color=&quot;blue&quot;&gt;我们可以在 AndroidDevTools 网站上找到最新的镜像地址和端口&lt;/font&gt;），然后勾选 &lt;em&gt;“Force https:// … sources to be fetched using http:// …”&lt;/em&gt; 选项，用 http 来代替 https(http 比 https 的效率要高)。&lt;/p&gt;
&lt;p&gt;完成上面的工作后，我们就可以下载到我们想要的 SDK 版本号了。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050506.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;    注意：Android Build Tools 是 Android SDK 的 Build 工具，会不定期更新，建议使用最新版本。&lt;br&gt;&lt;/div&gt;

&lt;p&gt;下图是 Android 模拟器的系统镜像文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050507.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你使用的 AS 自带的模拟器的话，这些东西必不可少，如果你使用的是 Genymotion 模拟器，就无需下载这些系统镜像文件了。&lt;/p&gt;
&lt;p&gt;然后还要下载相关的 API 文档和 Android 源代码资源（按住 Ctrl 能够跟踪进去查看源代码）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;API 文档：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050508.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Android 源代码资源：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050509.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-导入工程&quot;&gt;&lt;a href=&quot;#7-导入工程&quot; class=&quot;headerlink&quot; title=&quot;7.导入工程&quot;&gt;&lt;/a&gt;7.导入工程&lt;/h2&gt;&lt;p&gt;导入工程分为两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.导入 AS 工程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在导入 Github 上的 AS 工程时，经常会有失败的情况，而罪魁祸首就是编译工具 Gradle 的问题。&lt;/p&gt;
&lt;p&gt;比如说，你要导入的工程时基于 Gradle 1.5 来构建的，而你本地使用的不是 Gradle 1.5,那么导入工程时，就会去下载这个版本的 Gradle,很多时候，我们无法访问到这些资源，就会发生问题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如何解决：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1.在本地使用当前版本的 Gradle 创建一个正常的项目，保证其能够正常编译通过。&lt;br&gt;2.用这个新创建的项目中的 “Gradle” 文件夹和 “build.gradle” 文件，替换需要导入的项目的这两个文件夹。&lt;br&gt;3.再次打开这个项目，就可以用本地的 Gradle 对项目进行编译了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.导入 eclipse 工程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何将一个 eclipse 工程转为 AS 工程呢？&lt;/p&gt;
&lt;p&gt;1.在 eclipse 中需要导出的项目上右键，选择导出项目。&lt;br&gt;2.”Generate Gradle Build files”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016050510.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.在 AS 中选择导入生成的 Build.gradle 文件即可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我在之前有两篇介绍 Android Studio 的博文，分别是 &lt;a href=&quot;http://jiangbing.me/2016/01/25/2016-01-25-android-studio-tips-and-tricks/&quot;&gt;《Android Studio 概览》&lt;/a&gt; 和 &lt;a href=&quot;http://jiangbing.me/2016/01/27/2016-01-27-android-studio-preview/&quot;&gt;《再说说 Android Studio》&lt;/a&gt;，但这两篇基本上都是介绍 Android Studio 的功能，今天这篇将会说说，当我们将 Android Studio 下载完成后，需要对 AS(下面均简称为 AS) 做的配置，以便我们能够方便高效的使用这个开发工具.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;注意：本文后续建立在你已经下好了 AS,且能够正常启动.(至于如何下载，这没什么好说的，自行 Google,百度即可 …)&lt;/strong&gt;&lt;/font&gt;

&lt;h2 id=&quot;1-Gradle-配置文件下载耗时太长的问题&quot;&gt;&lt;a href=&quot;#1-Gradle-配置文件下载耗时太长的问题&quot; class=&quot;headerlink&quot; title=&quot;1.Gradle 配置文件下载耗时太长的问题&quot;&gt;&lt;/a&gt;1.Gradle 配置文件下载耗时太长的问题&lt;/h2&gt;&lt;p&gt;当我们第一次启动 AS，并点击 &lt;em&gt;“Start a new Android Studio project”&lt;/em&gt; 的时候，AS 会自动去下载 Gradle 相关的配置文件，默认下载完成后放置位置在 C:\User\Administrator.gradle 下的 C:\Users\Administrator\gradle\wrapper\dists\gradle-2.1-all\27fdsaorewru2342dsjon45 文件夹，也许你会疑问这一串数字和英文组合的文件夹是什么意思，其实它是随机生成的。&lt;/p&gt;
&lt;p&gt;我们打开这个文件夹，可以看到 gradle-2.1-all.zip 的 .part 文件。拿到这个版本号，我们可以通过第三方下载软件（例如迅雷）去 Google 官方网站去下载。&lt;/p&gt;
&lt;p&gt;下载好 gradle-2.1-all.zip 文件好，无需解压，放到这个奇怪的文件夹下，AS 运行的时候会自动解压。这样就可以为我们节省了很多时间了，再次创建工程的时候只需要下载一些 jcenter 的依赖包即可，而这些文件都很小，不会花费多长时间。&lt;br&gt;
    
    </summary>
    
      <category term="Issues Resolution" scheme="http://www.jiangbing.me/categories/Issues-Resolution/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://www.jiangbing.me/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>关于 Genymotion 中启动下载好的虚拟设备报错：Unable to start the virtual device. VirtualBox cannot start the virtual device.</title>
    <link href="http://www.jiangbing.me/2016/03/28/2016-03-28-start-a-virual-device-failed-on-the-genymotion/"/>
    <id>http://www.jiangbing.me/2016/03/28/2016-03-28-start-a-virual-device-failed-on-the-genymotion/</id>
    <published>2016-03-28T13:59:25.000Z</published>
    <updated>2016-05-14T06:04:48.076Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;问题出现场景：最近在新机器上装上 Genymotion 后，启动下载好的虚拟设备，老是报错，启动失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题详情&quot;&gt;&lt;a href=&quot;#问题详情&quot; class=&quot;headerlink&quot; title=&quot;问题详情&quot;&gt;&lt;/a&gt;问题详情&lt;/h2&gt;&lt;p&gt;因为当时没有截图报错的 Dialog,下面就手打出具体的错误信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;font color=&quot;red&quot;&gt;Unable to start the virtual device.&lt;/font&gt;&lt;br&gt; &lt;font color=&quot;red&quot;&gt;VirtualBox cannot start the virtual device.&lt;/font&gt;&lt;br&gt; &lt;font color=&quot;red&quot;&gt;To find out the cause of the problem, start the virtual device from VirtualBox.&lt;/font&gt;&lt;br&gt; &lt;font color=&quot;red&quot;&gt;For more information, check the log files. &lt;/font&gt;Please refer to: &lt;a href=&quot;https://www.genymotion.com/#!/support?chapter=collapse-logs#faq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.genymotion.com/#!/support?chapter=collapse-logs#faq&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上面的提示信息并没有具体说明是什么错误，但是提示我们可以从 VirtualBox 中直接启动来查找问题发生的具体原因：&lt;/p&gt;
&lt;p&gt;按照提示，在 &lt;code&gt;VirtualBox&lt;/code&gt; 中直接启动虚拟手机后，报了一行有用的错误信息（&lt;font color=&quot;red&quot;&gt;Intel VT-x 虚拟化被禁用了&lt;/font&gt;），依然没有截图……&lt;/p&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;由于默认情况下，&lt;code&gt;Intel VT-x&lt;/code&gt; 是不被启用的，我们需要重启电脑，进入 &lt;code&gt;BIOS&lt;/code&gt; 模式，找到 &lt;code&gt;Intel VT-x&lt;/code&gt; 选项，启用它，保存并退出，重新开机后，再次打开 Genymotion，就可以如愿打开模拟器了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问题出现场景：最近在新机器上装上 Genymotion 后，启动下载好的虚拟设备，老是报错，启动失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题详情&quot;&gt;&lt;a href=&quot;#问题详情&quot; class=&quot;headerlink&quot; title=&quot;问题详情&quot;&gt;&lt;/a&gt;问题详情&lt;/h2&gt;&lt;p&gt;因为当时没有截图报错的 Dialog,下面就手打出具体的错误信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;font color=&#39;red&#39;&gt;Unable to start the virtual device.&lt;/font&gt;&lt;br&gt; &lt;font color=&#39;red&#39;&gt;VirtualBox cannot start the virtual device.&lt;/font&gt;&lt;br&gt; &lt;font color=&#39;red&#39;&gt;To find out the cause of the problem, start the virtual device from VirtualBox.&lt;/font&gt;&lt;br&gt; &lt;font color=&#39;red&#39;&gt;For more information, check the log files. &lt;/font&gt;Please refer to: &lt;a href=&quot;https://www.genymotion.com/#!/support?chapter=collapse-logs#faq&quot;&gt;https://www.genymotion.com/#!/support?chapter=collapse-logs#faq&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Issues Resolution" scheme="http://www.jiangbing.me/categories/Issues-Resolution/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Genymotion" scheme="http://www.jiangbing.me/tags/Genymotion/"/>
    
  </entry>
  
  <entry>
    <title>关于如何运用命令行操作 Android 真机上的 SQLite 数据库</title>
    <link href="http://www.jiangbing.me/2016/03/22/2016-03-22-how-can-we-use-cmd-operate-sqlite-of-the-true-phone/"/>
    <id>http://www.jiangbing.me/2016/03/22/2016-03-22-how-can-we-use-cmd-operate-sqlite-of-the-true-phone/</id>
    <published>2016-03-22T08:26:13.000Z</published>
    <updated>2016-05-14T12:56:52.878Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;场景：今天在对 sqlite 数据库中的某张表进行查询时，发现查询到的数据总是为空，但是，我非常肯定表中是有数据的，所谓口说无凭，需要真正确认才能定论，于是就需要查 sqlite 数据库，但是真机的 .db 文件无法通过 DDMS 导出，也就无法运用第三方 sqlite 客户端打开 .db 文件来查询数据了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇博文就来说说如何运用命令行来对真机上的 sqlite 数据库文件进行操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步 ： 打开 cmd (Windows 系统)，切换至&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第二步 ： 定位到你 app 的数据库文件所在目录：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd data/data/com.example.demo/databases&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;第三步 ： &lt;code&gt;ls&lt;/code&gt; 或者 &lt;code&gt;ll&lt;/code&gt; 查看文件夹下的所有数据库，通过 &lt;code&gt;sqlite3&lt;/code&gt; 打开指定数据库：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sqlite3 db1.db&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的命令即可打开该数据库了，输入语句对表进行增删改查，你也可以通过输入 &lt;code&gt;.help&lt;/code&gt; 来查看 sqlite3 的相关命令，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016041400.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;：常用 sqlite 设置命令表格：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.tables&lt;/td&gt;
&lt;td&gt;查看当前数据库下所有的表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.exit&lt;/td&gt;
&lt;td&gt;退出数据库模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.headers ON/OFF&lt;/td&gt;
&lt;td&gt;是否显示列名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.mode csv/ column（推荐）/ html/insert/ line/ list/ tabs&lt;/td&gt;
&lt;td&gt;表的显示样式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.show&lt;/td&gt;
&lt;td&gt;会显示所有设置的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：执行的语句，结尾需跟上分号（;）,若没有则会出现 …&amp;gt;&lt;/font&gt; 



&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;场景：今天在对 sqlite 数据库中的某张表进行查询时，发现查询到的数据总是为空，但是，我非常肯定表中是有数据的，所谓口说无凭，需要真正确认才能定论，于是就需要查 sqlite 数据库，但是真机的 .db 文件无法通过 DDMS 导出，也就无法运用第三方 sqlite 客户端打开 .db 文件来查询数据了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇博文就来说说如何运用命令行来对真机上的 sqlite 数据库文件进行操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步 ： 打开 cmd (Windows 系统)，切换至&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第二步 ： 定位到你 app 的数据库文件所在目录：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd data/data/com.example.demo/databases&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android SQLite" scheme="http://www.jiangbing.me/categories/Android-SQLite/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="SQLite" scheme="http://www.jiangbing.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>【Guitar 弹唱】 董小姐</title>
    <link href="http://www.jiangbing.me/2016/03/15/2016-03-15-guitar-dong-xiao-jie/"/>
    <id>http://www.jiangbing.me/2016/03/15/2016-03-15-guitar-dong-xiao-jie/</id>
    <published>2016-03-15T06:59:53.000Z</published>
    <updated>2016-05-14T00:31:52.405Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;宋冬野 - 《董小姐》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/PoHXhezHJ3M/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宋冬野 - 《董小姐》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/PoHXhezHJ3M/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="http://www.jiangbing.me/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="Guitar" scheme="http://www.jiangbing.me/tags/Guitar/"/>
    
  </entry>
  
  <entry>
    <title>Android View 小结</title>
    <link href="http://www.jiangbing.me/2016/03/10/2016-03-10-the-summary-of-android-view/"/>
    <id>http://www.jiangbing.me/2016/03/10/2016-03-10-the-summary-of-android-view/</id>
    <published>2016-03-10T07:16:27.000Z</published>
    <updated>2016-05-14T06:09:41.837Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;文本对于 Android View 的总结比较简洁易懂，转过来与大家一起分享。&lt;br&gt;原文地址：&lt;a href=&quot;http://threezj.com/2015/12/17/Android%20View%E8%AF%A6%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://threezj.com/2015/12/17/Android%20View%E8%AF%A6%E8%A7%A3/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于-Android-View-控件&quot;&gt;&lt;a href=&quot;#关于-Android-View-控件&quot; class=&quot;headerlink&quot; title=&quot;关于 Android View 控件&quot;&gt;&lt;/a&gt;关于 Android View 控件&lt;/h2&gt;&lt;p&gt;Android 中控件大致被分为两类 ViewGroup,View。ViewGroup 作为容器管理 View。 Android 视图，是类似于 Dom 树的架构。父视图负责测量定位绘制等操作。我们经常在用的 &lt;code&gt;findViewById&lt;/code&gt; 方法代价昂贵的原因，就是因为他负责至上而下遍历整棵控件树，来寻找 View 实例，在重复操作中尽量少用。现在在用的很多控件都是直接或者间接继承自 View 的，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016033000.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-UI-界面架构&quot;&gt;&lt;a href=&quot;#Android-UI-界面架构&quot; class=&quot;headerlink&quot; title=&quot;Android UI 界面架构&quot;&gt;&lt;/a&gt;Android UI 界面架构&lt;/h2&gt;&lt;p&gt;每个 Activity 包含一个 PhoneWindow 对象，PhoneWindow 设置 DecorView 为应用窗口的根视图。在里面就是熟悉的 TitleView 和 ContentView,没错，平时使用的 &lt;code&gt;setContentView()&lt;/code&gt; 就是设置的 ContentView。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016033001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-是如何绘制-View-的？&quot;&gt;&lt;a href=&quot;#Android-是如何绘制-View-的？&quot; class=&quot;headerlink&quot; title=&quot;Android 是如何绘制 View 的？&quot;&gt;&lt;/a&gt;Android 是如何绘制 View 的？&lt;/h2&gt;&lt;p&gt;当一个 Activity 启动时，会被要求绘制出它的布局。Android 框架会处理这个请求，当然前提是 Activity 提供了合理的布局。绘制从根视图开始，从上至下遍历整棵视图树，每一个 ViewGroup 负责让自己的子 View 被绘制，每一个 View 负责绘制自己，通过 &lt;code&gt;draw()&lt;/code&gt; 方法.绘制过程分三步走:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Measure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layout&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Draw&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个绘制流程是在 ViewRoot 中的 &lt;code&gt;performTraversals()&lt;/code&gt; 方法展开的。部分源代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;performTraversals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//最外层的根视图的widthMeasureSpec和heightMeasureSpec由来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//lp.width和lp.height在创建ViewGroup实例时等于MATCH_PARENT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mView.layout(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, mView.getMeasuredWidth(), mView.getMeasuredHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mView.draw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在绘制之前当然要知道 view 的尺寸和绘制。所以先进行 measure 和 layout（测量和定位），如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016033002.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Measure-过程&quot;&gt;&lt;a href=&quot;#Measure-过程&quot; class=&quot;headerlink&quot; title=&quot;Measure 过程&quot;&gt;&lt;/a&gt;Measure 过程&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; widthMeasureSpec, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; heightMeasureSpec)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//....  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//回调onMeasure()方法    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onMeasure(widthMeasureSpec, heightMeasureSpec);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//more  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;计算 view 的实际大小，获得高宽存入 mMeasuredHeight 和 mMeasureWidth，measure(int, int)传入的两个参数。MeasureSpec 是一个32位 int 值，高2位为测量的模式，低30位为测量的大小。测量的模式可以分为以下三种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;EXACTLY&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;精确值模式，当 layout_width 或 layout_height 指定为具体数值，或者为 match_parent 时，系统使用 EXACTLY。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AT_MOST&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最大值模式，指定为 wrap_content 时，控件的尺寸不能超过父控件允许的最大尺寸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UNSPECIFIED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不指定测量模式，View 想多大就多大，一般不太使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上面的源码可知，measure 方法不可被重写，自定义时需要重写的是 onMeasure 方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; widthMeasureSpec, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; heightMeasureSpec)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看源码可知最终的高宽是调用 &lt;code&gt;setMeasuredDimension()&lt;/code&gt; 设定的,如果不重写，默认是直接调用 getDefaultSize 获取尺寸的。&lt;/p&gt;
&lt;p&gt;使用 View 的 &lt;code&gt;getMeasuredWidth()&lt;/code&gt; 和 &lt;code&gt;getMeasuredHeight()&lt;/code&gt; 方法来获取 View 测量的宽高，必须保证这两个方法在 onMeasure 流程之后被调用才能返回有效值。&lt;/p&gt;
&lt;h2 id=&quot;Layout-过程&quot;&gt;&lt;a href=&quot;#Layout-过程&quot; class=&quot;headerlink&quot; title=&quot;Layout 过程&quot;&gt;&lt;/a&gt;Layout 过程&lt;/h2&gt;&lt;p&gt;Layout 方法就是用来确定 view 布局的位置，就好像你知道了一件东西的大小以后，总要知道位置才能画上去。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mView.layout(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, mView.getMeasuredWidth(), mView.getMeasuredHeight());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;layout 获取四个参数，左，上，右，下坐标，相对于父视图而言。这里可以看到，使用了刚刚测量的宽和高。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldL = mLeft;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldT = mTop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldB = mBottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldR = mRight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; changed = setFrame(l, t, r, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (changed || (mPrivateFlags &amp;amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onLayout(changed, l, t, r, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 setFrame 设置坐标。如果坐标改变过了，则重新进行定位。如果是 View 对象，那么 onLayout 是个空方法。因为定位是由 ViewGroup 确定的。&lt;/p&gt;
&lt;p&gt;当 layout 结束以后 &lt;code&gt;getWidth()&lt;/code&gt; 与 &lt;code&gt;getHeight()&lt;/code&gt; 才会返回正确的值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;red&quot;&gt;这里出现一个问题，getWidth/Height() and getMeasuredWidth/Height() 有什么区别？&lt;/font&gt;

&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getWidth()&lt;/code&gt;: View 在設定好佈局後整個 View 的寬度。 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;getMeasuredWidth()&lt;/code&gt;: 對 View 上的內容進行測量後得到的 View 內容佔據的寬度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016033003.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Draw-过程&quot;&gt;&lt;a href=&quot;#Draw-过程&quot; class=&quot;headerlink&quot; title=&quot;Draw 过程&quot;&gt;&lt;/a&gt;Draw 过程&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Canvas canvas)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * Draw traversal performs several drawing steps which must be executed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * in the appropriate order:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      1. Draw the background&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      2. If necessary, save the canvas&#39; layers to prepare for fading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      3. Draw view&#39;s content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      4. Draw children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      5. If necessary, draw the fading edges and restore layers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *      6. Draw decorations (scrollbars for instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 1, draw the background, if needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!dirtyOpaque) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            drawBackground(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// skip step 2 &amp;amp; 5 if possible (common case)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 2, save the canvas&#39; layers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (drawTop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                canvas.saveLayer(left, top, right, top + length, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 3, draw the content&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!dirtyOpaque) onDraw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 4, draw the children&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatchDraw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 5, draw the fade effect and restore layers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (drawTop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            matrix.setScale(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, fadeHeight * topFadeStrength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            matrix.postTranslate(left, top);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fade.setLocalMatrix(matrix);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p.setShader(fade);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            canvas.drawRect(left, top, right, top + length, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Step 6, draw decorations (scrollbars)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onDrawScrollBars(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重点是第三步调用 onDraw 方法。其它几步都是绘制一些边边角角的东西比如背景、scrollBar 之类的。其中 dispatchDraw，是用来递归调用子 View,如果没有则不需要。&lt;/p&gt;
&lt;p&gt;onDraw 方法是需要自己实现的，因为每个控件绘制的内容不同。主要用 canvas 对象进行绘制，这里就不说了。&lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/16330267&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android视图绘制流程完全解析，带你一步步深入了解View(二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.&lt;a href=&quot;http://blog.csdn.net/yanbober/article/details/46128379&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android应用层View绘制流程与源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.&lt;a href=&quot;http://developer.android.com/intl/zh-cn/guide/topics/ui/how-android-draws.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Android Draws Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.&lt;a href=&quot;http://www.amazon.cn/Android%E7%BE%A4%E8%8B%B1%E4%BC%A0-%E5%BE%90%E5%AE%9C%E7%94%9F/dp/B01481RAA4/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1450359477&amp;amp;sr=1-1&amp;amp;keywords=android%E7%BE%A4%E8%8B%B1%E4%BC%A0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Android群英传》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5.&lt;a href=&quot;http://stackoverflow.com/questions/8657540/what-is-the-difference-between-getwidth-height-and-getmeasuredwidth-height-i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the difference between getWidth/Height() and getMeasuredWidth/Height() in Android SDK?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文本对于 Android View 的总结比较简洁易懂，转过来与大家一起分享。&lt;br&gt;原文地址：&lt;a href=&quot;http://threezj.com/2015/12/17/Android%20View%E8%AF%A6%E8%A7%A3/&quot;&gt;http://threezj.com/2015/12/17/Android%20View%E8%AF%A6%E8%A7%A3/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于-Android-View-控件&quot;&gt;&lt;a href=&quot;#关于-Android-View-控件&quot; class=&quot;headerlink&quot; title=&quot;关于 Android View 控件&quot;&gt;&lt;/a&gt;关于 Android View 控件&lt;/h2&gt;&lt;p&gt;Android 中控件大致被分为两类 ViewGroup,View。ViewGroup 作为容器管理 View。 Android 视图，是类似于 Dom 树的架构。父视图负责测量定位绘制等操作。我们经常在用的 &lt;code&gt;findViewById&lt;/code&gt; 方法代价昂贵的原因，就是因为他负责至上而下遍历整棵控件树，来寻找 View 实例，在重复操作中尽量少用。现在在用的很多控件都是直接或者间接继承自 View 的，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016033000.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android View 知识" scheme="http://www.jiangbing.me/tags/Android-View-%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>【Guitar 弹唱】 秋意浓</title>
    <link href="http://www.jiangbing.me/2016/03/02/2016-03-02-guitar-qiu-yi-nong/"/>
    <id>http://www.jiangbing.me/2016/03/02/2016-03-02-guitar-qiu-yi-nong/</id>
    <published>2016-03-02T02:26:11.000Z</published>
    <updated>2016-05-14T06:19:48.854Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;还记得星爷唱的那首李香兰吗？ :-D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/UfeNzClc3QE/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;还记得星爷唱的那首李香兰吗？ :-D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/UfeNzClc3QE/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="http://www.jiangbing.me/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="Guitar" scheme="http://www.jiangbing.me/tags/Guitar/"/>
    
  </entry>
  
  <entry>
    <title>Android Touch 事件传递机制</title>
    <link href="http://www.jiangbing.me/2016/02/29/2016-02-30-mastering-the-android-touch-system/"/>
    <id>http://www.jiangbing.me/2016/02/29/2016-02-30-mastering-the-android-touch-system/</id>
    <published>2016-02-29T03:45:49.000Z</published>
    <updated>2016-05-14T06:13:29.881Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转自 Trinea大牛的 &lt;a href=&quot;http://www.trinea.cn/android/touch-event-delivery-mechanism/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Android Touch事件传递机制》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;(1) 所有 Touch 事件都被封装成了 MotionEvent 对象，包括 Touch 的位置、时间、历史记录以及第几个手指(多指触摸)等。&lt;/p&gt;
&lt;p&gt;(2) 事件类型分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACTION_DOWN&lt;/li&gt;
&lt;li&gt;ACTION_UP&lt;/li&gt;
&lt;li&gt;ACTION_MOVE &lt;/li&gt;
&lt;li&gt;ACTION_POINTER_DOWN &lt;/li&gt;
&lt;li&gt;ACTION_POINTER_UP&lt;/li&gt;
&lt;li&gt;ACTION_CANCEL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个事件都是以ACTION_DOWN 开始 ACTION_UP 结束。&lt;/p&gt;
&lt;p&gt;(3) 对事件的处理包括三类，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.传递：dispatchTouchEvent()函数&lt;/li&gt;
&lt;li&gt;2.拦截：onInterceptTouchEvent()函数&lt;/li&gt;
&lt;li&gt;3.消费：onTouchEvent()函数和 OnTouchListener&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;传递流程&quot;&gt;&lt;a href=&quot;#传递流程&quot; class=&quot;headerlink&quot; title=&quot;传递流程&quot;&gt;&lt;/a&gt;传递流程&lt;/h2&gt;&lt;p&gt;(1) 事件从&lt;code&gt;Activity.dispatchTouchEvent()&lt;/code&gt; 开始传递，只要没有被停止或拦截，从最上层的 &lt;code&gt;View(ViewGroup)&lt;/code&gt; 开始一直往下(子View)传递。子View可以通过 &lt;code&gt;onTouchEvent()&lt;/code&gt; 对事件进行处理。&lt;/p&gt;
&lt;p&gt;(2) 事件由父View(ViewGroup)传递给子View，ViewGroup 可以通过 &lt;code&gt;onInterceptTouchEvent()&lt;/code&gt; 对事件做拦截，停止其往下传递。&lt;/p&gt;
&lt;p&gt;(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，事件会反向往上传递，这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到 Activity 的 &lt;code&gt;onTouchEvent()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;(4) 如果 View 没有对 &lt;code&gt;ACTION_DOWN&lt;/code&gt; 进行消费，之后的其他事件不会传递过来。&lt;/p&gt;
&lt;p&gt;(5) &lt;code&gt;OnTouchListener&lt;/code&gt; 优先于 &lt;code&gt;onTouchEvent()&lt;/code&gt; 对事件进行消费。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的消费即表示相应函数返回值为true。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文 PDF 文档 &lt;a href=&quot;http://wugengxin.cn/download/pdf/android/PRE_andevcon_mastering-the-android-touch-system.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Mastering the Android Touch System》&lt;/a&gt;，实例代码：&lt;a href=&quot;https://github.com/devunwired/custom-touch-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo@Github&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附上两张原文中流程图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(1) View 不处理事件流程图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016031700.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(2) View 处理事件流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016031701.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转自 Trinea大牛的 &lt;a href=&quot;http://www.trinea.cn/android/touch-event-delivery-mechanism/&quot;&gt;《Android Touch事件传递机制》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;(1) 所有 Touch 事件都被封装成了 MotionEvent 对象，包括 Touch 的位置、时间、历史记录以及第几个手指(多指触摸)等。&lt;/p&gt;
&lt;p&gt;(2) 事件类型分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACTION_DOWN&lt;/li&gt;
&lt;li&gt;ACTION_UP&lt;/li&gt;
&lt;li&gt;ACTION_MOVE &lt;/li&gt;
&lt;li&gt;ACTION_POINTER_DOWN &lt;/li&gt;
&lt;li&gt;ACTION_POINTER_UP&lt;/li&gt;
&lt;li&gt;ACTION_CANCEL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个事件都是以ACTION_DOWN 开始 ACTION_UP 结束。&lt;/p&gt;
&lt;p&gt;(3) 对事件的处理包括三类，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.传递：dispatchTouchEvent()函数&lt;/li&gt;
&lt;li&gt;2.拦截：onInterceptTouchEvent()函数&lt;/li&gt;
&lt;li&gt;3.消费：onTouchEvent()函数和 OnTouchListener
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Touch" scheme="http://www.jiangbing.me/tags/Android-Touch/"/>
    
  </entry>
  
  <entry>
    <title>关于 Android 中的 HTTP Clients</title>
    <link href="http://www.jiangbing.me/2016/02/27/2016-02-25-android-s-http-client/"/>
    <id>http://www.jiangbing.me/2016/02/27/2016-02-25-android-s-http-client/</id>
    <published>2016-02-27T09:12:43.000Z</published>
    <updated>2016-05-14T06:14:59.184Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文翻译自 Google Dalvik 虚拟机团队 &lt;a href=&quot;http://www.publicobject.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jesse Wilson&lt;/a&gt; 的 &lt;a href=&quot;http://android-developers.blogspot.sg/2011/09/androids-http-clients.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android’s HTTP Client&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;绝大多数 Android app 都会用 HTTP 来进行网络连接，已达到收发数据的目的。 Android 中有两个 Http 使用类，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.HttpURLConnection.&lt;/li&gt;
&lt;li&gt;2.Apache 的 HTTP Client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种都支持 HTTPS,上传，下载，超时配置，IPv6 和连接池。&lt;/p&gt;
&lt;h2 id=&quot;Apache-HTTP-Client&quot;&gt;&lt;a href=&quot;#Apache-HTTP-Client&quot; class=&quot;headerlink&quot; title=&quot;Apache HTTP Client&quot;&gt;&lt;/a&gt;Apache HTTP Client&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/org/apache/http/impl/client/DefaultHttpClient.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DefaultHttpClient&lt;/a&gt; 和他的兄弟类 &lt;a href=&quot;http://developer.android.com/reference/android/net/http/AndroidHttpClient.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidHttpClient&lt;/a&gt; 对于 web 浏览器拓展性非常好。它们拥有庞大的，弹性很好的 API 供我们使用。且它们稳定性极高，很少存在 bug.&lt;/p&gt;
&lt;p&gt;但是如此大量的 API,在我们不破坏其兼容性的前提下，很难去对其拓展。这也是为什么 Android 团队为何不喜欢 Apache HTTP Client 的原因。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;HttpURLConnection&quot;&gt;&lt;a href=&quot;#HttpURLConnection&quot; class=&quot;headerlink&quot; title=&quot;HttpURLConnection&quot;&gt;&lt;/a&gt;HttpURLConnection&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/java/net/HttpURLConnection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HttpURLConnection&lt;/a&gt; 是一个比较通用的，轻量级的，适用于大多数应用的 HTTP 类.我们很容易在此类上做拓展。&lt;/p&gt;
&lt;p&gt;在 Froyo（2.2）之前， HttpURLConnedction 存在一个重大 bug.那就是，在对 &lt;code&gt;InputStream&lt;/code&gt; 调用 &lt;code&gt;close()&lt;/code&gt; 方法时会影响连接池。所以在 2.2 之前我们需要关闭连接池：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;disableConnectionReuseIfNecessary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// HTTP connection reuse which was buggy pre-froyo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Integer.parseInt(Build.VERSION.SDK) &amp;lt; Build.VERSION_CODES.FROYO) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;http.keepAlive&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Gingerbread（2.3）版本上，为 HttpURLConnection 添加了 gzip 压缩请求头：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Accept-Encoding: gzip&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;利用它，可以让服务端对传输的数据进行压缩，如果对压缩的支持有问题的话，你可以参考这里的&lt;a href=&quot;http://developer.android.com/reference/java/net/HttpURLConnection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;，以便知道如何来禁用此项功能。&lt;/p&gt;
&lt;p&gt;通过 HTTP 的 Content-Length 头来获取压缩文件的大小。使用 getContentLength() 来获取未压缩数据的大小是错误的。正确的做法是，从服务端读取字节流直到 &lt;code&gt;InputStream.read()&lt;/code&gt; 返回 -1 为止。&lt;/p&gt;
&lt;p&gt;我们在 Gingerbread(2.3) 中对 HTTPS 做了些许改进。 HttpURLConnection 能够尝试连接 Server Name Indication(SNI:允许多个HTTPS主机共享一个IP地址).此外， HttpURLConnection 还有压缩数据和获取 session 的功能。 如果连接失败，HttpURLConnection 会禁用掉这些功能然后再次连接。 这使得 HttpURLConnection 在不破坏对旧版本兼容性的基础上，能够根据服务端的实际情况来选择最高效的应对方案。&lt;/p&gt;
&lt;p&gt;在 Ice Cream Sandwich（4.0）中, 我们添加了请求结果缓存的功能. 一旦有了缓存, HTTP 请求将会在下面三种方式中挑选:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有网络连接的情况下，且本地有完整缓存的时候，HTTP 请求会直接从本地拿数据。&lt;/li&gt;
&lt;li&gt;局部数据缓存需要向服务器验证本地缓存是否为服务器上最新的数据。比如说：客户端发了一条类似这样的请求：”给我一张本地在昨天有缓存的 foo.png 的图片”，这时服务器可能会返回两种结果，一是被更新过的这张图片，或者是 304（未被更新，可以直接拿本地数据）。也就是说，如果图片没被更新过，则不会再次下载图片。&lt;/li&gt;
&lt;li&gt;本地没有缓存的数据会请求服务器拿最新的。稍后，它们将会被缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以在支持缓存的设备上来打开 HTTP 的缓存功能。下面的实例告诉你如何在不影响 Ice Cream Sandwich（4.0）前的版本上来打开这项功能：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enableHttpResponseCache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; httpCacheSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10 MiB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File httpCacheDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(getCacheDir(), &lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;android.net.http.HttpResponseCache&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .getMethod(&lt;span class=&quot;string&quot;&gt;&quot;install&quot;&lt;/span&gt;, File.class, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .invoke(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, httpCacheDir, httpCacheSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception httpResponseCacheNotAvailable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你需要同时在服务端在对 HTTP 做响应时，配置缓存头（cache headers）.&lt;/p&gt;
&lt;h2 id=&quot;我们应该如何抉择&quot;&gt;&lt;a href=&quot;#我们应该如何抉择&quot; class=&quot;headerlink&quot; title=&quot;我们应该如何抉择&quot;&gt;&lt;/a&gt;我们应该如何抉择&lt;/h2&gt;&lt;p&gt;在 Froyo(2.2) 之前，我们最好选择 Apache 的 HTTP client。&lt;br&gt;在 Gingerbread(2.3) 之后， HttpURLConnection 是最好的选择。 它的轻量化使得它非常适合 Android, 另外，数据压缩和请求结果缓存使得它的性能大幅提高（包括响应速度，节省电量）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 Google Dalvik 虚拟机团队 &lt;a href=&quot;http://www.publicobject.com/&quot;&gt;Jesse Wilson&lt;/a&gt; 的 &lt;a href=&quot;http://android-developers.blogspot.sg/2011/09/androids-http-clients.html&quot;&gt;Android’s HTTP Client&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;绝大多数 Android app 都会用 HTTP 来进行网络连接，已达到收发数据的目的。 Android 中有两个 Http 使用类，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.HttpURLConnection.&lt;/li&gt;
&lt;li&gt;2.Apache 的 HTTP Client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种都支持 HTTPS,上传，下载，超时配置，IPv6 和连接池。&lt;/p&gt;
&lt;h2 id=&quot;Apache-HTTP-Client&quot;&gt;&lt;a href=&quot;#Apache-HTTP-Client&quot; class=&quot;headerlink&quot; title=&quot;Apache HTTP Client&quot;&gt;&lt;/a&gt;Apache HTTP Client&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/org/apache/http/impl/client/DefaultHttpClient.html&quot;&gt;DefaultHttpClient&lt;/a&gt; 和他的兄弟类 &lt;a href=&quot;http://developer.android.com/reference/android/net/http/AndroidHttpClient.html&quot;&gt;AndroidHttpClient&lt;/a&gt; 对于 web 浏览器拓展性非常好。它们拥有庞大的，弹性很好的 API 供我们使用。且它们稳定性极高，很少存在 bug.&lt;/p&gt;
&lt;p&gt;但是如此大量的 API,在我们不破坏其兼容性的前提下，很难去对其拓展。这也是为什么 Android 团队为何不喜欢 Apache HTTP Client 的原因。&lt;br&gt;
    
    </summary>
    
      <category term="Android 网络" scheme="http://www.jiangbing.me/categories/Android-%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Http" scheme="http://www.jiangbing.me/tags/Android-Http/"/>
    
  </entry>
  
  <entry>
    <title>通过 Android Studio 远程调试真机</title>
    <link href="http://www.jiangbing.me/2016/02/25/2015-12-05-remote-debug-devices-with-android-studio/"/>
    <id>http://www.jiangbing.me/2016/02/25/2015-12-05-remote-debug-devices-with-android-studio/</id>
    <published>2016-02-25T07:09:59.000Z</published>
    <updated>2016-05-14T08:07:17.708Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转自 &lt;a href=&quot;[http://www.finalshares.com/read-5498](http://www.finalshares.com/read-5498&quot;&gt;&lt;a href=&quot;http://www.finalshares.com/read-5498&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.finalshares.com/read-5498&lt;/a&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;还在为找不到目标真机发愁，今天在逛 &lt;a href=&quot;http://www.finalshares.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极分享&lt;/a&gt; 的时候，看到一篇比较好的文章，觉得对我们Android开发作用很大，就转了过来。接下来我们就来看看原文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前用了很久的模拟器，今天给大家分享一个不用模拟器，在没有手机的情况下，如何实现真机 debug 的教程，第一次发教程贴，望支持哈，非喜勿喷哈！&lt;br&gt;废话少说，先睹为快。在不用数据线连接手机的情况下，我先来个打断点截图。&lt;br&gt;&lt;img src=&quot;/images/2016031500.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现步骤&quot;&gt;&lt;a href=&quot;#实现步骤&quot; class=&quot;headerlink&quot; title=&quot;实现步骤&quot;&gt;&lt;/a&gt;实现步骤&lt;/h2&gt;&lt;p&gt;首先，准备工作做好，需要借助如下这个辅助工具。&lt;br&gt;&lt;img src=&quot;/images/2016031501.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这是需要注册一个账号才能使用的，现在这个平台是开放注册，免费体验，看完觉得还可以的话觉得点这里注册试试： &lt;a href=&quot;http://t.cn/R48gYL5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://t.cn/R48gYL5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工具准备好以后，点进去选一台手机，比如像我之前调试的时候选的是一台 &lt;strong&gt;htc one M8&lt;/strong&gt;.&lt;br&gt;&lt;img src=&quot;/images/2016031502.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击租用以后我们会看到这个画面。&lt;br&gt;&lt;img src=&quot;/images/2016031503.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以用鼠标点击或者滑动屏幕，这台手机也会跟着动。实际上我们现在操作的手机是一台真的手机，只是他在云端，也就是我们平常说的远程调试，我们是在用电脑操控它，而且它还支持截图，视频，日志，shell命令等功能。&lt;/p&gt;
&lt;p&gt;接下来，我们需要看到界面右上角的adb 连接地址。&lt;br&gt;&lt;img src=&quot;/images/2016031504.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;每台云手机都有一个单独的连接地址，我们需要复制这个adb连接地址到命令行，然后按回车执行这个命令我们的电脑就会连接到云手机。（ps：云端和PC上显示的adb地址一定要一致）&lt;br&gt;&lt;img src=&quot;/images/2016031505.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;输入命令“adb devices”，看到以下结果的话，此时我们的电脑已经连接到云手机上了。&lt;br&gt;&lt;img src=&quot;/images/2016031506.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在我们就可以用Android Studio调试了。（我这里是以AS为例，其实eclipse也是一样用的）&lt;br&gt;当我们的电脑通过前面的操作连接到了云手机，我们就获得了这台手机的最大控制权。此时，打开我们的Android Studio来debug吧！ &lt;/p&gt;
&lt;p&gt;首先，在代码中设置断点:&lt;br&gt;&lt;img src=&quot;/images/2016031507.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开 Android Studio,工具栏选择 Run —&amp;gt; Debug，选中已连接的云手机:&lt;br&gt;&lt;img src=&quot;/images/2016031508.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序启动，可以看到程序命中断点，即可开始远程调试了。&lt;br&gt;&lt;img src=&quot;/images/2016031509.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;这个工具的优势就在于它集合了上千款各种型号的手机，不会再担心出现BUG没有手机调试的尴尬场景，而且所有的调试设备全部是真机，这样就避免了在调试的过程中模拟器速度慢、硬件性能模拟不出来以及接口不全的问题，然后就是这个工具提供视频、截图、日志、shell命令等功能用来记录和复现BUG，省钱省事，提高开发效率，何乐不为~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转自 &lt;a href=&quot;[http://www.finalshares.com/read-5498](http://www.finalshares.com/read-5498&quot;&gt;&lt;a href=&quot;http://www.finalshares.com/read-5498&quot;&gt;http://www.finalshares.com/read-5498&lt;/a&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;还在为找不到目标真机发愁，今天在逛 &lt;a href=&quot;http://www.finalshares.com/&quot;&gt;极分享&lt;/a&gt; 的时候，看到一篇比较好的文章，觉得对我们Android开发作用很大，就转了过来。接下来我们就来看看原文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前用了很久的模拟器，今天给大家分享一个不用模拟器，在没有手机的情况下，如何实现真机 debug 的教程，第一次发教程贴，望支持哈，非喜勿喷哈！&lt;br&gt;废话少说，先睹为快。在不用数据线连接手机的情况下，我先来个打断点截图。&lt;br&gt;&lt;img src=&quot;/images/2016031500.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现步骤&quot;&gt;&lt;a href=&quot;#实现步骤&quot; class=&quot;headerlink&quot; title=&quot;实现步骤&quot;&gt;&lt;/a&gt;实现步骤&lt;/h2&gt;&lt;p&gt;首先，准备工作做好，需要借助如下这个辅助工具。&lt;br&gt;&lt;img src=&quot;/images/2016031501.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://www.jiangbing.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="开发工具" scheme="http://www.jiangbing.me/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android项目编码规范</title>
    <link href="http://www.jiangbing.me/2016/02/22/2016-02-22-android-project-guidelines/"/>
    <id>http://www.jiangbing.me/2016/02/22/2016-02-22-android-project-guidelines/</id>
    <published>2016-02-22T06:00:29.000Z</published>
    <updated>2016-05-14T06:37:08.485Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文翻译自 GitHub 上一篇个人认为比较好的 Android 项目规范文档： &lt;a href=&quot;https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个项目都应该有编码规范，俗话说的好：”无规矩不成方圆”。没有编码规范的项目，恩，谁维护谁知道…反正我是深有体会。废话少说，本篇博文将会从几大模块介绍作为一个 Android 开发人员，应该遵循的。&lt;/p&gt;
&lt;h2 id=&quot;文件命名&quot;&gt;&lt;a href=&quot;#文件命名&quot; class=&quot;headerlink&quot; title=&quot;文件命名&quot;&gt;&lt;/a&gt;文件命名&lt;/h2&gt;&lt;h3 id=&quot;类命名&quot;&gt;&lt;a href=&quot;#类命名&quot; class=&quot;headerlink&quot; title=&quot;类命名&quot;&gt;&lt;/a&gt;类命名&lt;/h3&gt;&lt;p&gt;继承自某一组件的 java 类的命名方式因该以该组件为后缀，比如 &lt;code&gt;SignInActivity&lt;/code&gt;, &lt;code&gt;SignInFragment&lt;/code&gt;, &lt;code&gt;ImageUploaderService&lt;/code&gt;, &lt;code&gt;ChangePasswordDialog&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;资源文件&quot;&gt;&lt;a href=&quot;#资源文件&quot; class=&quot;headerlink&quot; title=&quot;资源文件&quot;&gt;&lt;/a&gt;资源文件&lt;/h3&gt;&lt;p&gt;资源文件应以下划线 &lt;code&gt;_&lt;/code&gt; 来分割。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Drawable文件&quot;&gt;&lt;a href=&quot;#Drawable文件&quot; class=&quot;headerlink&quot; title=&quot;Drawable文件&quot;&gt;&lt;/a&gt;Drawable文件&lt;/h4&gt;&lt;p&gt;应遵守下面的规范：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;种类&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;命名规范&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Action bar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ab_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ab_stacked.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Button&lt;/td&gt;
&lt;td&gt;&lt;code&gt;btn_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_send_pressed.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dialog&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dialog_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dialog_top.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Divider&lt;/td&gt;
&lt;td&gt;&lt;code&gt;divider_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;divider_horizontal.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Icon&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_star.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Menu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;menu_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;menu_submenu_bg.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notification&lt;/td&gt;
&lt;td&gt;&lt;code&gt;notification_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;notification_bg.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tabs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tab_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;tab_pressed.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;icons 相关命名（摘自&lt;a href=&quot;http://developer.android.com/design/style/iconography.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android iconography guidelines&lt;/a&gt;）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;种类&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;命名规范&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_star.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Launcher icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_launcher_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_launcher_calendar.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Menu icons and Action Bar icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_menu_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_menu_archive.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status bar icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_stat_notify_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_stat_notify_msg.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_tab_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_tab_recent.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dialog icons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ic_dialog_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ic_dialog_info.png&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;selector 相关：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;种类&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;后缀&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;命名规范&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_normal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_order_normal.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pressed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_pressed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_order_pressed.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focused&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_focused&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_order_focused.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disabled&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_normal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_order_normal.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selected&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_selected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;btn_order_selected.9.png&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Layout-文件&quot;&gt;&lt;a href=&quot;#Layout-文件&quot; class=&quot;headerlink&quot; title=&quot;Layout 文件&quot;&gt;&lt;/a&gt;Layout 文件&lt;/h4&gt;&lt;p&gt;布局文件应该与 Android 组件文件名匹配。比如说你为 &lt;code&gt;SignInActivity&lt;/code&gt; 创建布局文件，布局文件应该是这样: &lt;code&gt;activity_sign_in.xml&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;组件&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;文件名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;布局文件命名方式&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Activity&lt;/td&gt;
&lt;td&gt;UserProfileActivity&lt;/td&gt;
&lt;td&gt;activity_user_profile.xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fragment&lt;/td&gt;
&lt;td&gt;SignUpFragment&lt;/td&gt;
&lt;td&gt;fragment_sign_up.xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dialog&lt;/td&gt;
&lt;td&gt;ChangePasswordDialog&lt;/td&gt;
&lt;td&gt;dialog_change_password.xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdapterView item&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;item_person.xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Partial layout&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;partial_stats_bar.xml&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: &lt;font color=&quot;red&quot;&gt;需要注意的是，当你为 &lt;code&gt;adapter&lt;/code&gt; 创建布局文件时，应该以 &lt;code&gt;item_&lt;/code&gt; 为前缀；另一个就是包含在布局文件的子布局文件，应以 &lt;code&gt;partial_&lt;/code&gt; 为前缀。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Menu-文件&quot;&gt;&lt;a href=&quot;#Menu-文件&quot; class=&quot;headerlink&quot; title=&quot;Menu 文件&quot;&gt;&lt;/a&gt;Menu 文件&lt;/h4&gt;&lt;p&gt;Menu 文件与布局文件命名风格一样，比如说你准备为 &lt;code&gt;UserActivity&lt;/code&gt; 创建 menu 文件，命名方式应是这样：&lt;code&gt;activity_user.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你也许会疑惑，为何不以 &lt;code&gt;menu_&lt;/code&gt; 为前缀？大可不必这样做，因为这些文件都被包含在 &lt;code&gt;menu&lt;/code&gt; 文件夹下了。&lt;/p&gt;
&lt;h4 id=&quot;Values-文件&quot;&gt;&lt;a href=&quot;#Values-文件&quot; class=&quot;headerlink&quot; title=&quot;Values 文件&quot;&gt;&lt;/a&gt;Values 文件&lt;/h4&gt;&lt;p&gt;Values 文件的命名应该是以复数的形式来命名，例如 &lt;code&gt;strings.xml&lt;/code&gt;, &lt;code&gt;styles.xml&lt;/code&gt;, &lt;code&gt;colors.xml&lt;/code&gt;, &lt;code&gt;dimens.xml&lt;/code&gt;, &lt;code&gt;attrs.xml&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;代码规范&quot;&gt;&lt;a href=&quot;#代码规范&quot; class=&quot;headerlink&quot; title=&quot;代码规范&quot;&gt;&lt;/a&gt;代码规范&lt;/h2&gt;&lt;h3 id=&quot;Java-语言规则&quot;&gt;&lt;a href=&quot;#Java-语言规则&quot; class=&quot;headerlink&quot; title=&quot;Java 语言规则&quot;&gt;&lt;/a&gt;Java 语言规则&lt;/h3&gt;&lt;h4 id=&quot;不要无视异常&quot;&gt;&lt;a href=&quot;#不要无视异常&quot; class=&quot;headerlink&quot; title=&quot;不要无视异常&quot;&gt;&lt;/a&gt;不要无视异常&lt;/h4&gt;&lt;p&gt;比如下面这段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setServerPort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        serverPort = Integer.parseInt(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也许你在想，依据当时的业务场景，这种异常根本不会存在，不处理也无可厚非。明天将会发生什么，谁也不知道，你的这种行为也只是为后人挖了个坑，总有一天，有人会掉进去。严谨的代码是必须处理这些异常的，至于具体如何处理，因情况而定。&lt;/p&gt;
&lt;p&gt;更具体参见&lt;a href=&quot;https://source.android.com/source/code-style.html#dont-ignore-exceptions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;不要捕获父类的异常&quot;&gt;&lt;a href=&quot;#不要捕获父类的异常&quot; class=&quot;headerlink&quot; title=&quot;不要捕获父类的异常&quot;&gt;&lt;/a&gt;不要捕获父类的异常&lt;/h4&gt;&lt;p&gt;你不应该写出下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someComplicatedIOFunction();        &lt;span class=&quot;comment&quot;&gt;// may throw IOException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someComplicatedParsingFunction();   &lt;span class=&quot;comment&quot;&gt;// may throw ParsingException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someComplicatedSecurityFunction();  &lt;span class=&quot;comment&quot;&gt;// may throw SecurityException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// phew, made it all the way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;                 &lt;span class=&quot;comment&quot;&gt;// I&#39;ll just catch all exceptions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handleError();                      &lt;span class=&quot;comment&quot;&gt;// with one generic handler!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于为何要这么做，以及更详尽的信息，参见&lt;a href=&quot;https://source.android.com/source/code-style.html#dont-catch-generic-exception&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Don’t-use-finalizers&quot;&gt;&lt;a href=&quot;#Don’t-use-finalizers&quot; class=&quot;headerlink&quot; title=&quot;Don’t use finalizers&quot;&gt;&lt;/a&gt;Don’t use finalizers&lt;/h4&gt;&lt;p&gt;We don’t use finalizers. There are no guarantees as to when a finalizer will be called, or even that it will be called at all. In most cases, you can do what you need from a finalizer with good exception handling. If you absolutely need it, define a &lt;code&gt;close()&lt;/code&gt; method (or the like) and document exactly when that method needs to be called. See &lt;code&gt;InputStream&lt;/code&gt; for an example. In this case it is appropriate but not required to print a short log message from the finalizer, as long as it is not expected to flood the logs。-（&lt;a href=&quot;https://source.android.com/source/code-style.html#dont-use-finalizers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android code style guidelines&lt;/a&gt;）&lt;/p&gt;
&lt;h4 id=&quot;完整包引入&quot;&gt;&lt;a href=&quot;#完整包引入&quot; class=&quot;headerlink&quot; title=&quot;完整包引入&quot;&gt;&lt;/a&gt;完整包引入&lt;/h4&gt;&lt;font color=&quot;red&quot;&gt;你不应该这样做：&lt;code&gt;import foo.*;&lt;/code&gt;&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;你应该这样做：&lt;code&gt;import foo.Bar;&lt;/code&gt;&lt;/font&gt;

&lt;p&gt;具体信息参见&lt;a href=&quot;https://source.android.com/source/code-style.html#fully-qualify-imports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Java-style-rules&quot;&gt;&lt;a href=&quot;#Java-style-rules&quot; class=&quot;headerlink&quot; title=&quot;Java style rules&quot;&gt;&lt;/a&gt;Java style rules&lt;/h3&gt;&lt;h4 id=&quot;字段定义和命名&quot;&gt;&lt;a href=&quot;#字段定义和命名&quot; class=&quot;headerlink&quot; title=&quot;字段定义和命名&quot;&gt;&lt;/a&gt;字段定义和命名&lt;/h4&gt;&lt;p&gt;变量应被定义在&lt;strong&gt;文件的顶部&lt;/strong&gt;，他们应该遵循下面列出的命名规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私有的，非静态的变量应该以 &lt;strong&gt;m&lt;/strong&gt; 开头。&lt;/li&gt;
&lt;li&gt;私有的，静态的变量以 &lt;strong&gt;s&lt;/strong&gt; 开头。&lt;/li&gt;
&lt;li&gt;其他类型的小写开头，驼峰式命名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; &lt;code&gt;final&lt;/code&gt;类型的变量均已大写，下划线分割的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SOME_CONSTANT = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; publicField;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; MyClass sSingleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mPackagePrivate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mPrivate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mProtected;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;驼峰式&quot;&gt;&lt;a href=&quot;#驼峰式&quot; class=&quot;headerlink&quot; title=&quot;驼峰式&quot;&gt;&lt;/a&gt;驼峰式&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;正确&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;错误&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;XmlHttpRequest&lt;/td&gt;
&lt;td&gt;XMLHTTPRequest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getCustomerId&lt;/td&gt;
&lt;td&gt;getCustomerID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String url&lt;/td&gt;
&lt;td&gt;String URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long id&lt;/td&gt;
&lt;td&gt;long ID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;空格缩进&quot;&gt;&lt;a href=&quot;#空格缩进&quot; class=&quot;headerlink&quot; title=&quot;空格缩进&quot;&gt;&lt;/a&gt;空格缩进&lt;/h4&gt;&lt;p&gt;代码块内缩进使用 &lt;em&gt;4个空格&lt;/em&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;行缩进使用 &lt;em&gt;8个空格&lt;/em&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Instrument i =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        someLongExpression(that, wouldNotFit, on, one, line);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Use-standard-brace-style&quot;&gt;&lt;a href=&quot;#Use-standard-brace-style&quot; class=&quot;headerlink&quot; title=&quot;Use standard brace style&quot;&gt;&lt;/a&gt;Use standard brace style&lt;/h4&gt;&lt;p&gt;Braces go on the same line as the code before them.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (something) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (somethingElse) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Braces around the statements are required unless the condition and the body fit on one line.&lt;/p&gt;
&lt;p&gt;如果判断的代码只有一行，并且最长行数的代码还少的话，大括号就没有必要了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (condition) body();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而不应该写成下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (condition)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body();  &lt;span class=&quot;comment&quot;&gt;// bad!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h4&gt;&lt;h4 id=&quot;Annotations-practices&quot;&gt;&lt;a href=&quot;#Annotations-practices&quot; class=&quot;headerlink&quot; title=&quot;Annotations practices&quot;&gt;&lt;/a&gt;Annotations practices&lt;/h4&gt;&lt;p&gt;依据 Android code style guide,一些 Java 中的预定义注解的标准做法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Override&lt;/code&gt;: The @Override annotation &lt;strong&gt;must be used&lt;/strong&gt; whenever a method overrides the declaration or implementation from a super-class. For example, if you use the @inheritdocs Javadoc tag, and derive from a class (not an interface), you must also annotate that the method @Overrides the parent class’s method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@SuppressWarnings&lt;/code&gt;: The @SuppressWarnings annotation should only be used under circumstances where it is impossible to eliminate a warning. If a warning passes this “impossible to eliminate” test, the @SuppressWarnings annotation must be used, so as to ensure that all warnings reflect actual problems in the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多信息参见&lt;a href=&quot;http://source.android.com/source/code-style.html#use-standard-java-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;注解style&quot;&gt;&lt;a href=&quot;#注解style&quot; class=&quot;headerlink&quot; title=&quot;注解style&quot;&gt;&lt;/a&gt;注解style&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;类, 方法和构造器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个类，或者方法，或者构造器中运用到注解，则&lt;em&gt;注解应该下注释的下面，且一行一注解&lt;/em&gt;的原则：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This is the documentation block about the class */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AnnotationA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AnnotationB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyAnnotatedClass&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;字段上的注解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于字段上的注解应该和该字段处于同一行，除非达到最大行数：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Mock&lt;/span&gt; DataManager mDataManager;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h3&gt;&lt;p&gt;局部变量的作用域我们应保持到最小。如此，可以提升你代码的可读性和维护性，降低bug出现的可能性。&lt;/p&gt;
&lt;p&gt;局部变量应被声明在第一次使用的地方。且每个变量都应初始化。&lt;/p&gt;
&lt;h3 id=&quot;import语句排序&quot;&gt;&lt;a href=&quot;#import语句排序&quot; class=&quot;headerlink&quot; title=&quot;import语句排序&quot;&gt;&lt;/a&gt;import语句排序&lt;/h3&gt;&lt;p&gt;如果你正在使用的 IDE 是 android studio,你无须担心排序的问题，应该 android studio 已经自动帮你干完了.否则,你需要看看下面排序方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.Android imports&lt;/li&gt;
&lt;li&gt;2.Imports from third parties (com, junit, net, org)&lt;/li&gt;
&lt;li&gt;3.java and javax&lt;/li&gt;
&lt;li&gt;4.Same project imports&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个分组中还需按字母表的排序, 且大写字母在小写字母的前面 (如： Z 在 a 之前).&lt;/li&gt;
&lt;li&gt;分组和分组之间应该空一行 (android, com, junit, net, org, java, javax).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://source.android.com/source/code-style.html#limit-variable-scope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多信息&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;Log&lt;/code&gt; 类提供的方法能够让我们来发现问题所在:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log.v(String tag, String msg) (verbose)&lt;/li&gt;
&lt;li&gt;Log.d(String tag, String msg) (debug)&lt;/li&gt;
&lt;li&gt;Log.i(String tag, String msg) (information)&lt;/li&gt;
&lt;li&gt;Log.w(String tag, String msg) (warning)&lt;/li&gt;
&lt;li&gt;Log.e(String tag, String msg) (error)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下, 我们在类的顶部定义一个 &lt;code&gt;static final&lt;/code&gt; 的 TAG 变量，该变量为所在类的类名，具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String TAG = MyClass.class.getSimpleName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;My error message&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;VERBOSE 和 DEBUG 日志需在 app 发行版本中禁用. 同样还建议你将 INFORMATION, WARNING 和 ERROR 日志禁用掉，当然这个看你自己，如果你觉得这些信息对于发行版本的 app 的 bug 有用处的话，你可以选择不禁用，这个时候你需要确保这些日志不会泄露用户的隐私信息（比如： email, 地址，用户名，密码等）。&lt;/p&gt;
&lt;p&gt;仅在调试版本打印日志：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BuildConfig.DEBUG) Log.d(TAG, &lt;span class=&quot;string&quot;&gt;&quot;The value of x is &quot;&lt;/span&gt; + x);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;类成员变量排序&quot;&gt;&lt;a href=&quot;#类成员变量排序&quot; class=&quot;headerlink&quot; title=&quot;类成员变量排序&quot;&gt;&lt;/a&gt;类成员变量排序&lt;/h3&gt;&lt;p&gt;使用正确的顺序将会显著提高你代码的可读性。这里推荐你使用下面的排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.常量（Constants）&lt;/li&gt;
&lt;li&gt;2.成员变量（Fields）&lt;/li&gt;
&lt;li&gt;3.构造器（Constructors）&lt;/li&gt;
&lt;li&gt;4.重写的方法和回调方法(public 或者 private)&lt;/li&gt;
&lt;li&gt;5.Public 方法&lt;/li&gt;
&lt;li&gt;6.Private 方法&lt;/li&gt;
&lt;li&gt;7.内部类和接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String mTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TextView mTextViewTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String title)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTitle = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setUpView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnInnerClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你写的类继承自 Activity 和 Fragment 这样的 android 组件，对于重写的方法，最好和组件的生命周期相匹配。比如，你写的 activity 实现了 &lt;code&gt;onCreate()&lt;/code&gt;, &lt;code&gt;onDestroy()&lt;/code&gt;， &lt;code&gt;onPause()&lt;/code&gt;, 和 &lt;code&gt;onResume()&lt;/code&gt;, 那么正确的排序是：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Order matches Activity lifecycle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法中参数的排序&quot;&gt;&lt;a href=&quot;#方法中参数的排序&quot; class=&quot;headerlink&quot; title=&quot;方法中参数的排序&quot;&gt;&lt;/a&gt;方法中参数的排序&lt;/h3&gt;&lt;p&gt;在 Android 编程中，定义大部分的方法都可能需要一个 &lt;code&gt;context&lt;/code&gt; 参数，如果正在定义这样一个方法，&lt;code&gt;context&lt;/code&gt; 需要放在第一位。&lt;br&gt;而若存在回调接口，则需要放在最后一位，比如:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Context always goes first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;loadUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; userId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Callbacks always go last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadUserAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; userId, UserCallback callback)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;在 Android SDK 中的 SharedPreferences, Bundle, Intent 都大量使用了字符串常量，所以说，即使一个很小的 app,也有可能定义很多字符串常量。&lt;/p&gt;
&lt;p&gt;如何你需要定义字符串常量，你需要将其定义为 &lt;code&gt;static final&lt;/code&gt;，并加上下面的前缀：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;所属&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;变量前缀&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SharedPreferences&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PREF_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bundle&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BUNDLE_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fragment Arguments&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ARGUMENT_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intent Extra&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EXTRA_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intent Action&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ACTION_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;需要注意的是 Fragment 中的arguments : &lt;code&gt;Fragment.getArguments()&lt;/code&gt;,它同样是一个 Bundle.然而，因为它太常见了，我们需要为其声明一个不一样的前缀，如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Note the value of the field is the same as the name to avoid duplication issues&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PREF_EMAIL = &lt;span class=&quot;string&quot;&gt;&quot;PREF_EMAIL&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String BUNDLE_AGE = &lt;span class=&quot;string&quot;&gt;&quot;BUNDLE_AGE&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String ARGUMENT_USER_ID = &lt;span class=&quot;string&quot;&gt;&quot;ARGUMENT_USER_ID&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Intent-related items use full package name as value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String EXTRA_SURNAME = &lt;span class=&quot;string&quot;&gt;&quot;com.myapp.extras.EXTRA_SURNAME&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String ACTION_OPEN_USER = &lt;span class=&quot;string&quot;&gt;&quot;com.myapp.action.ACTION_OPEN_USER&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Fragments和Activities中的参数&quot;&gt;&lt;a href=&quot;#Fragments和Activities中的参数&quot; class=&quot;headerlink&quot; title=&quot;Fragments和Activities中的参数&quot;&gt;&lt;/a&gt;Fragments和Activities中的参数&lt;/h3&gt;&lt;p&gt;当我们通过 Intent 或者 Bundle 向 activity 传递参数时，对于不同参数的 key 应遵循上一节中的规则。&lt;br&gt;当 activity 或者 Fragment 需要传递参数，它需要提供一个 &lt;code&gt;public static&lt;/code&gt; 方法以便接下来该干什么。&lt;/p&gt;
&lt;p&gt;Activity中的此方法通常命名为 &lt;code&gt;getStartIntent()&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Intent &lt;span class=&quot;title&quot;&gt;getStartIntent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(context, ThisActivity.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.putParcelableExtra(EXTRA_USER, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; intent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Fragments 中的此方法通常命名为： &lt;code&gt;newInstance()&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; UserFragment &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserFragment fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UserFragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Bundle args = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args.putParcelable(ARGUMENT_USER, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragment.setArguments(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意1：&lt;/strong&gt;: 此方法要放置在 &lt;code&gt;onCreate()&lt;/code&gt; 方法之前。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2：&lt;/strong&gt;: 如果我们声明了上面的方法，那么参数的 &lt;code&gt;key&lt;/code&gt; 应该是 &lt;code&gt;private&lt;/code&gt; 的。它们没有必要暴露给其他类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;代码行长度限制&quot;&gt;&lt;a href=&quot;#代码行长度限制&quot; class=&quot;headerlink&quot; title=&quot;代码行长度限制&quot;&gt;&lt;/a&gt;代码行长度限制&lt;/h3&gt;&lt;p&gt;每一行的代码不应超过 &lt;em&gt;100&lt;/em&gt; 个字节。如果超过 100 个字节，这里有两种方法来减少代码行的长度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取局部变量或方法(优先考虑)&lt;/li&gt;
&lt;li&gt;将当行转换为多行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但也有列外，下面这些情况，你可不必换行：:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不太可能被分割的行, 比如： 很长的 url 地址.&lt;/li&gt;
&lt;li&gt;包声明和包引入语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;在哪里换行？&quot;&gt;&lt;a href=&quot;#在哪里换行？&quot; class=&quot;headerlink&quot; title=&quot;在哪里换行？&quot;&gt;&lt;/a&gt;在哪里换行？&lt;/h4&gt;&lt;p&gt;对于在哪里换行，其实，也没有一个特别合理的解决方案。但，下面几点还是能够给予我们参考的价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运算符时换行&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; longName = anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + theFinalOne;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;=号后面&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; longName =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne + theFinalOne;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;.换行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如说将下面的代码换行前：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Picasso.with(context).load(&lt;span class=&quot;string&quot;&gt;&quot;http://ribot.co.uk/images/sexyjoe.jpg&quot;&lt;/span&gt;).into(imageView);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;换行后：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Picasso.with(context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .load(&lt;span class=&quot;string&quot;&gt;&quot;http://ribot.co.uk/images/sexyjoe.jpg&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .into(imageView);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;长参数换行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个方法拥有很长的参数时，我们应该换行：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;loadPicture(context, &lt;span class=&quot;string&quot;&gt;&quot;http://ribot.co.uk/images/sexyjoe.jpg&quot;&lt;/span&gt;, mImageViewProfilePicture, clickListener, &lt;span class=&quot;string&quot;&gt;&quot;Title of the picture&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;换行后：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;loadPicture(context,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;http://ribot.co.uk/images/sexyjoe.jpg&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mImageViewProfilePicture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clickListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;Title of the picture&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;RxJava-chains-styling&quot;&gt;&lt;a href=&quot;#RxJava-chains-styling&quot; class=&quot;headerlink&quot; title=&quot;RxJava chains styling&quot;&gt;&lt;/a&gt;RxJava chains styling&lt;/h3&gt;&lt;p&gt;Rx chains of operators require line-wrapping. Every operator must go in a new line and the line should be broken before the .&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Location&amp;gt; &lt;span class=&quot;title&quot;&gt;syncLocations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mDatabaseHelper.getAllLocations()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .concatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Location, Observable&amp;lt;? extends Location&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;? extends Location&amp;gt; call(Location location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mRetrofitService.getLocation(location.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .retry(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func2&amp;lt;Integer, Throwable, Boolean&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Boolean &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer numRetries, Throwable throwable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; throwable &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; RetrofitError;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;XML-规范&quot;&gt;&lt;a href=&quot;#XML-规范&quot; class=&quot;headerlink&quot; title=&quot;XML 规范&quot;&gt;&lt;/a&gt;XML 规范&lt;/h2&gt;&lt;h3 id=&quot;使用头标签闭合&quot;&gt;&lt;a href=&quot;#使用头标签闭合&quot; class=&quot;headerlink&quot; title=&quot;使用头标签闭合&quot;&gt;&lt;/a&gt;使用头标签闭合&lt;/h3&gt;&lt;p&gt;当一个 xml 节点中没有任何的内容，使用自闭合即可。&lt;/p&gt;
&lt;p&gt;正确的做法：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/text_view_profile&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;错误的做法：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Don&#39;t do this! --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/text_view_profile&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;资源命名&quot;&gt;&lt;a href=&quot;#资源命名&quot; class=&quot;headerlink&quot; title=&quot;资源命名&quot;&gt;&lt;/a&gt;资源命名&lt;/h3&gt;&lt;p&gt;resource 的 id 应该小写且下划线分割。&lt;/p&gt;
&lt;h4 id=&quot;ID命名&quot;&gt;&lt;a href=&quot;#ID命名&quot; class=&quot;headerlink&quot; title=&quot;ID命名&quot;&gt;&lt;/a&gt;ID命名&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;节点&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TextView&lt;/td&gt;
&lt;td&gt;&lt;code&gt;text_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImageView&lt;/td&gt;
&lt;td&gt;&lt;code&gt;image_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Button&lt;/td&gt;
&lt;td&gt;&lt;code&gt;button_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Menu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;menu_&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ImageView范例：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Don&#39;t do this! --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ImageView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/image_profile&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Menu范例：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Don&#39;t do this! --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/menu_done&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Done&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Strings&quot;&gt;&lt;a href=&quot;#Strings&quot; class=&quot;headerlink&quot; title=&quot;Strings&quot;&gt;&lt;/a&gt;Strings&lt;/h4&gt;&lt;p&gt;Strings 的命名应该以其所在的场景含义为前缀来命名。比如 &lt;code&gt;registration_email_hint&lt;/code&gt; 或 &lt;code&gt;registration_name_hint&lt;/code&gt;。如果一个 string,你找不到归类，你可以遵守的下面的规范：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;msg_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常规的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标题，如 dialog 的标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;action_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;动作，如保存或创建&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Styles-and-Themes&quot;&gt;&lt;a href=&quot;#Styles-and-Themes&quot; class=&quot;headerlink&quot; title=&quot;Styles and Themes&quot;&gt;&lt;/a&gt;Styles and Themes&lt;/h4&gt;&lt;p&gt;根命名以大驼峰命名，其余则以小驼峰命名。&lt;/p&gt;
&lt;h3 id=&quot;属性排序&quot;&gt;&lt;a href=&quot;#属性排序&quot; class=&quot;headerlink&quot; title=&quot;属性排序&quot;&gt;&lt;/a&gt;属性排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.View Id&lt;/li&gt;
&lt;li&gt;2.Style&lt;/li&gt;
&lt;li&gt;3.布局长宽&lt;/li&gt;
&lt;li&gt;4.其他 layout 属性，按字母排序&lt;/li&gt;
&lt;li&gt;5.剩下的属性, 按字母排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;测试规范&quot;&gt;&lt;a href=&quot;#测试规范&quot; class=&quot;headerlink&quot; title=&quot;测试规范&quot;&gt;&lt;/a&gt;测试规范&lt;/h2&gt;&lt;h3 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h3&gt;&lt;p&gt;测试类的命名应该以该类名加上 &lt;code&gt;Test&lt;/code&gt; 为后缀来命名。比如，我们创建一个 &lt;code&gt;DatabaseHelper&lt;/code&gt; 的测试类，类名应该为 &lt;code&gt;DatabaseHelperTest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;测试方法因该加上 @Test 注解，并且以被测试的方法名开头，后跟一个前提或预期的行为（有时候并不需要，根据测试的场景）来命名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Template: &lt;code&gt;@Test void methodNamePreconditionExpectedBehaviour()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;@Test void signInWithEmptyEmailFails()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候，一个类中包含了大量的方法，这个时候我们可以根据功能模块来分割这个类的测试类，比如说需要测试 &lt;code&gt;DataManager&lt;/code&gt;, 这个类有大量的方法，我们就可以将其划分为 &lt;code&gt;DataManagerSignInTest&lt;/code&gt;, &lt;code&gt;DataManagerLoadUsersTest&lt;/code&gt;,等。&lt;/p&gt;
&lt;h3 id=&quot;Espresso-tests&quot;&gt;&lt;a href=&quot;#Espresso-tests&quot; class=&quot;headerlink&quot; title=&quot;Espresso tests&quot;&gt;&lt;/a&gt;Espresso tests&lt;/h3&gt;&lt;p&gt;Espresso 测试通常作用于 Activity，因此命名通常以被测试的 activity 的类名为开头，如： &lt;code&gt;SignInActivityTest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当你使用到 Espresso 的 API 时，通常以下面的方式换行测试：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onView(withId(R.id.view))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .perform(scrollTo())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .check(matches(isDisplayed()))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 GitHub 上一篇个人认为比较好的 Android 项目规范文档： &lt;a href=&quot;https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md&quot;&gt;https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个项目都应该有编码规范，俗话说的好：”无规矩不成方圆”。没有编码规范的项目，恩，谁维护谁知道…反正我是深有体会。废话少说，本篇博文将会从几大模块介绍作为一个 Android 开发人员，应该遵循的。&lt;/p&gt;
&lt;h2 id=&quot;文件命名&quot;&gt;&lt;a href=&quot;#文件命名&quot; class=&quot;headerlink&quot; title=&quot;文件命名&quot;&gt;&lt;/a&gt;文件命名&lt;/h2&gt;&lt;h3 id=&quot;类命名&quot;&gt;&lt;a href=&quot;#类命名&quot; class=&quot;headerlink&quot; title=&quot;类命名&quot;&gt;&lt;/a&gt;类命名&lt;/h3&gt;&lt;p&gt;继承自某一组件的 java 类的命名方式因该以该组件为后缀，比如 &lt;code&gt;SignInActivity&lt;/code&gt;, &lt;code&gt;SignInFragment&lt;/code&gt;, &lt;code&gt;ImageUploaderService&lt;/code&gt;, &lt;code&gt;ChangePasswordDialog&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;资源文件&quot;&gt;&lt;a href=&quot;#资源文件&quot; class=&quot;headerlink&quot; title=&quot;资源文件&quot;&gt;&lt;/a&gt;资源文件&lt;/h3&gt;&lt;p&gt;资源文件应以下划线 &lt;code&gt;_&lt;/code&gt; 来分割。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android 项目规范" scheme="http://www.jiangbing.me/tags/Android-%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>初探 Android 中的 MVP 模式</title>
    <link href="http://www.jiangbing.me/2016/02/20/2016-02-20-the-overview-of-the-andorid-mvp/"/>
    <id>http://www.jiangbing.me/2016/02/20/2016-02-20-the-overview-of-the-andorid-mvp/</id>
    <published>2016-02-20T05:30:31.000Z</published>
    <updated>2016-05-14T06:41:21.519Z</updated>
    
    <content type="html">&lt;p&gt;本文将会为你介绍什么是 MVP 模式，以及它的长处，并从一个demo入手。&lt;/p&gt;
&lt;h2 id=&quot;MVP-使用起来真的简单吗？为何要使用它？&quot;&gt;&lt;a href=&quot;#MVP-使用起来真的简单吗？为何要使用它？&quot; class=&quot;headerlink&quot; title=&quot;MVP 使用起来真的简单吗？为何要使用它？&quot;&gt;&lt;/a&gt;MVP 使用起来真的简单吗？为何要使用它？&lt;/h2&gt;&lt;h3 id=&quot;什么是-MVP-模式？&quot;&gt;&lt;a href=&quot;#什么是-MVP-模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是 MVP 模式？&quot;&gt;&lt;/a&gt;什么是 MVP 模式？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View 层&lt;/strong&gt; 用来展示数据以及反馈用户操作。在Android中，此层级包括 Activity, Fragment, android.view.view.View 抑或者是一个 Dialog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model 层&lt;/strong&gt; 数据接入层，包括连接本地数据库，或者从服务器拿数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presenter 层&lt;/strong&gt; view 层和 model 层通信的中介，也就是说view想要展示数据，它需要找 Presenter 来拿，而 Presenter 会去调用 Model 层。Presenter 也被用来处理后台任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，使用 MVP 模式，可以让你的 activity, view, fragment 更加专注于 UI 相关，将业务逻辑剥离出来。这样可以使你的项目低耦合，高内聚，项目更易维护，可靠性倍增，拓展起来更爽。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用MVP的理由&quot;&gt;&lt;a href=&quot;#使用MVP的理由&quot; class=&quot;headerlink&quot; title=&quot;使用MVP的理由&quot;&gt;&lt;/a&gt;使用MVP的理由&lt;/h3&gt;&lt;h4 id=&quot;Keep-It-Stupid-Simple&quot;&gt;&lt;a href=&quot;#Keep-It-Stupid-Simple&quot; class=&quot;headerlink&quot; title=&quot;Keep It Stupid Simple&quot;&gt;&lt;/a&gt;Keep It Stupid Simple&lt;/h4&gt;&lt;p&gt;我们在做任何产品时，都应该保持 KISS 原则（Keep It Stupid Simple）,虽然这是从用户角度出发考虑的。但拿此观点，来实现我们的应用架构，同样适用。&lt;/p&gt;
&lt;p&gt;而目前市场里面的应用普遍存在以下状况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我敢肯定的说超过 80% 的应用是在使用 &lt;font color=&quot;red&quot;&gt;View-Model&lt;/font&gt; 的架构层级。（虽然这么说，他们自己并不会承认，因为他们自认为在使用的是MVC模式，activity充当控制层）&lt;/li&gt;
&lt;li&gt;很多开发者都在不断增加 activity 的复杂度，甚至一个 activity 的代码行数过千的情况（本人就亲眼见过，说实话我是一行都不想看），而不是将这些逻辑业务独立出来。这也使得后期的维护变得极其复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在只使用 &lt;strong&gt;View-Model&lt;/strong&gt; 模式的项目中，你可以看到以下的关系结构，还真是万物互联啊：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016030801.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种结构的项目复杂性你难以想象，其中的组件无法复用，debug 和测试起来都是费时费力，更不要说是重构了。&lt;/p&gt;
&lt;p&gt;那么使用 MVP 模式的项目是怎样的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016030802.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务复杂性减低，业务更易处理。&lt;/li&gt;
&lt;li&gt;更少的对象管理，bug 出现频率减少，更易 debug.&lt;/li&gt;
&lt;li&gt;测试更容易.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MVP 的视图层变得如此简单，请求数据时时它甚至不需要回调。整个视图的逻辑变得线性化。&lt;/p&gt;
&lt;font color=&quot;blue&quot;&gt;&lt;strong&gt;附1：MVP 和 MVC 差异图解：&lt;/strong&gt;&lt;/font&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016030803.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由上，&lt;strong&gt;我们可以看出 MVC 中是允许 Model 和 View 进行交互的，而 MVP 中很明显，Model 与 View 之间的交互由 Presenter 完成。还有一点就是 Presenter 与 View 之间的交互是通过接口的&lt;/strong&gt;。&lt;/p&gt;
&lt;font color=&quot;blue&quot;&gt;&lt;strong&gt;附2：ribot 架构图：&lt;/strong&gt;&lt;/font&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016030805.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;这里有我利用 MVP 模式实现的小 demo.&lt;/p&gt;
&lt;h4 id=&quot;demo项目结构&quot;&gt;&lt;a href=&quot;#demo项目结构&quot; class=&quot;headerlink&quot; title=&quot;demo项目结构&quot;&gt;&lt;/a&gt;demo项目结构&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/2016030806.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面是整个项目的结构图，bean 和 operation 隶属于 model 层，view 层（包括 activity,fragment,viewGroup 视图相关）只负责 UI 相关，presenter 层负责 view 的逻辑业务，二者通过定义的接口进行通讯。&lt;/p&gt;
&lt;font color=&quot;blue&quot;&gt;具体代码就不讲解了，这里附上 &lt;a href=&quot;https://github.com/weiwosuoai/Demos/tree/master/SimpleMVPDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Domo下载地址&lt;/a&gt;，以供下载查看源码.&lt;/font&gt;

&lt;p&gt;本文参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/konmik/konmik.github.io/wiki/Introduction-to-Model-View-Presenter-on-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/konmik/konmik.github.io/wiki/Introduction-to-Model-View-Presenter-on-Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/46596109&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791/article/details/46596109&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文将会为你介绍什么是 MVP 模式，以及它的长处，并从一个demo入手。&lt;/p&gt;
&lt;h2 id=&quot;MVP-使用起来真的简单吗？为何要使用它？&quot;&gt;&lt;a href=&quot;#MVP-使用起来真的简单吗？为何要使用它？&quot; class=&quot;headerlink&quot; title=&quot;MVP 使用起来真的简单吗？为何要使用它？&quot;&gt;&lt;/a&gt;MVP 使用起来真的简单吗？为何要使用它？&lt;/h2&gt;&lt;h3 id=&quot;什么是-MVP-模式？&quot;&gt;&lt;a href=&quot;#什么是-MVP-模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是 MVP 模式？&quot;&gt;&lt;/a&gt;什么是 MVP 模式？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View 层&lt;/strong&gt; 用来展示数据以及反馈用户操作。在Android中，此层级包括 Activity, Fragment, android.view.view.View 抑或者是一个 Dialog.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model 层&lt;/strong&gt; 数据接入层，包括连接本地数据库，或者从服务器拿数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presenter 层&lt;/strong&gt; view 层和 model 层通信的中介，也就是说view想要展示数据，它需要找 Presenter 来拿，而 Presenter 会去调用 Model 层。Presenter 也被用来处理后台任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，使用 MVP 模式，可以让你的 activity, view, fragment 更加专注于 UI 相关，将业务逻辑剥离出来。这样可以使你的项目低耦合，高内聚，项目更易维护，可靠性倍增，拓展起来更爽。&lt;br&gt;
    
    </summary>
    
      <category term="Android 架构" scheme="http://www.jiangbing.me/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android 架构" scheme="http://www.jiangbing.me/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>你还在写导致 context 内存泄露的代码吗？</title>
    <link href="http://www.jiangbing.me/2016/02/18/2016-02-18-how-to-leak-a-context-about-handlers-and-classes/"/>
    <id>http://www.jiangbing.me/2016/02/18/2016-02-18-how-to-leak-a-context-about-handlers-and-classes/</id>
    <published>2016-02-18T05:30:31.000Z</published>
    <updated>2016-05-14T06:54:25.058Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文翻译自： &lt;a href=&quot;http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个 Android 程序员，一定对下面这段代码很是熟悉：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Handler mLeakyHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;你或许认为这段代码写很正常，没有任何问题，那你就大错特错了。这段代码真是导致 context 内存泄露的罪魁祸首，Android Lint 可能会给你以下警告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;red&quot;&gt;In Android, Handler classes should be static or leaks might occur&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;你也许会疑惑，内存泄露是如何发生的？让我们来追寻问题的源头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.当一个 Android App 初次启动时，framework 层会为这个 app 的主线程创建一个 &lt;code&gt;Looper&lt;/code&gt; 对象。此对象的内部实现是一个队列，用来处理 &lt;code&gt;Message&lt;/code&gt; 对象。所有的应用 framework 事件（比如 activity 的生命周期方法调用，按钮的点击事件等）都交给这个 &lt;code&gt;Message&lt;/code&gt;,然后再放到消息队列用处理。主线程的 &lt;code&gt;Looper&lt;/code&gt; 对象存活在整个 application 的生命周期。&lt;/li&gt;
&lt;li&gt;2.当你在主线程中实例化了一个 &lt;code&gt;Handler&lt;/code&gt;,也就意味着它与 &lt;code&gt;Looper&lt;/code&gt; 的消息队列关联了，被发送到消息队列的消息会持有一个 Handler 的引用,以便 Android framework 层可以在 Looper 最终处理这个消息的时候，调用 &lt;code&gt;Handler#handleMessage(Message)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;3.在 Java 中，非静态的内部类和匿名类会隐式地持有一个他们外部类的引用。静态内部类则不会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了上面3点，你可能还不是很清楚到底什么是内存泄露？让我们再来看看下面这段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Handler mLeakyHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Post a message and delay its execution for 10 minutes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLeakyHandler.postDelayed(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Go back to the previous Activity.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finish();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当这个 Activity 被 finished 后，延时发送的消息会继续在主线程的消息队列中存活 10 分钟，直到他们被处理。这个消息持有这个 Activity 的 Handler 引用，这个 Handler 有隐式地持有他的外部类（在这个例子中是 SampleActivity ）。直到消息被处理前，这个引用都不会被释放。因此 Activity 不会被垃圾回收机制回收，泄露他所持有的应用程序资源。注意，第 15 行的匿名 Runnable 类也一样。匿名类的非静态实例持有一个隐式的外部类引用,因此 context 将被泄露。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Handler 的子类应该定义在一个新文件中或使用静态内部类。静态内部类不会隐式持有外部类的引用。所以不会导致它的 Activity 泄露。如果你需要在Handle内部调用外部 Activity 的方法，那么让 Handler 持有一个 Activity 的弱引用（WeakReference）以便你不会意外导致 context 泄露。为了解决我们实例化匿名 Runnable 类可能导致的内存泄露，我们将用一个静态变量来引用他（因为匿名类的静态实例不会隐式持有他们外部类的引用）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Instances of static inner classes do not hold an implicit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * reference to their outer class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Handler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WeakReference&amp;lt;SampleActivity&amp;gt; mActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SampleActivity activity)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mActivity = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WeakReference&amp;lt;SampleActivity&amp;gt;(activity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SampleActivity activity = mActivity.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (activity != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; MyHandler mHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyHandler(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Instances of anonymous classes do not hold an implicit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * reference to their outer class when they are &quot;static&quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Runnable sRunnable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Post a message and delay its execution for 10 minutes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler.postDelayed(sRunnable, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Go back to the previous Activity.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finish();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为一个 Android 开发人员都应该了解。开发中不能碰的雷区是什么？&lt;strong&gt;不在一个 Activity 中使用非静态内部类， 以防它的生命周期比 Activity 长。相反，尽量使用持有 Activity 弱引用的静态内部类。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自： &lt;a href=&quot;http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html&quot;&gt;http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个 Android 程序员，一定对下面这段代码很是熟悉：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Handler mLeakyHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android 性能优化" scheme="http://www.jiangbing.me/categories/Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Performance Optimization" scheme="http://www.jiangbing.me/tags/Android-Performance-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>Android 中的 AsyncTask</title>
    <link href="http://www.jiangbing.me/2016/02/16/2016-02-16-asynctask-of-the-android/"/>
    <id>http://www.jiangbing.me/2016/02/16/2016-02-16-asynctask-of-the-android/</id>
    <published>2016-02-16T05:30:31.000Z</published>
    <updated>2016-05-14T07:17:27.254Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;AsyncTask 能够让我们不用操作 threads 和 handlers 的情况下，在 UI 线程中方便的执行耗时操作，并且返回结果到 UI 线程。&lt;/p&gt;
&lt;p&gt;AsyncTask 理论上被用来执行 &lt;em&gt;短时&lt;/em&gt;（通常情况下，只需几秒的操作）的操作。如果你需要长时间的执行某一操作，强烈推荐你使用 &lt;code&gt;java.util.concurrent&lt;/code&gt; 包下的 &lt;code&gt;Executor&lt;/code&gt;, &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; 和 &lt;code&gt;FutureTask&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;你在定义AsyncTask时需要定义三个泛型参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Called Params&lt;/strong&gt; - 传入的参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Progress&lt;/strong&gt;      - 执行中的参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;        - 返回值参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4 个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onPreExecute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doInBackground()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onProgressUpdate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onPostExecute()&lt;/code&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何使用？&quot;&gt;&lt;a href=&quot;#如何使用？&quot; class=&quot;headerlink&quot; title=&quot;如何使用？&quot;&gt;&lt;/a&gt;如何使用？&lt;/h2&gt;&lt;p&gt;AsyncTask 必须作为一个子类去使用。其中， &lt;code&gt;doInBackgournd(Params...)&lt;/code&gt; 是必须实现的方法，大部分情况下，我们还需要实现 &lt;code&gt;onPostExecute(Result)&lt;/code&gt; 方法.&lt;/p&gt;
&lt;p&gt;下面是一个使用的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DownloadFilesTask&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;URL&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Long &lt;span class=&quot;title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(URL... urls)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = urls.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; totalSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            totalSize += Downloader.downloadFile(urls[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            publishProgress((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) ((i / (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;) count) * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Escape early if cancel() is called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isCancelled()) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; totalSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer... progress)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setProgressPercent(progress[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long result)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        showDialog(&lt;span class=&quot;string&quot;&gt;&quot;Downloaded &quot;&lt;/span&gt; + result + &lt;span class=&quot;string&quot;&gt;&quot; bytes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后,就是执行这个 AsyncTask:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DownloadFilesTask().execute(url1, url2, url3);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;AsyncTask-的泛型参数&quot;&gt;&lt;a href=&quot;#AsyncTask-的泛型参数&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask 的泛型参数&quot;&gt;&lt;/a&gt;AsyncTask 的泛型参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.&lt;code&gt;Params&lt;/code&gt;   执行前传入的参数&lt;/li&gt;
&lt;li&gt;2.&lt;code&gt;Progress&lt;/code&gt; 执行中传入的参数&lt;/li&gt;
&lt;li&gt;3.&lt;code&gt;Result&lt;/code&gt;   执行完毕后返回的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，如果你不需要传任何参数，使用 &lt;code&gt;Void&lt;/code&gt; 即可：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyTask&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Void&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Void&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Void&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;四个方法&quot;&gt;&lt;a href=&quot;#四个方法&quot; class=&quot;headerlink&quot; title=&quot;四个方法&quot;&gt;&lt;/a&gt;四个方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.&lt;code&gt;onPreExecute()&lt;/code&gt; UI线程会在任务执行前调用此方法。通常被用来设置与任务相关的操作，比如在用户界面显示一个进度条。&lt;/li&gt;
&lt;li&gt;2.&lt;code&gt;doInBackground(Params...)&lt;/code&gt; 在 &lt;code&gt;onPreExecute()&lt;/code&gt; 执行完毕后，调用此方法，注意，此耗时操作执行在一个后台线程中。 &lt;code&gt;Params&lt;/code&gt; 参数会被传入到此方法中，计算的结果必须由这一步返回，并将传回最后一步。在方法中，我们还可以调用 &lt;code&gt;publishProgress(Progress...)&lt;/code&gt; 来传递进度，然后我就可以在 &lt;code&gt;onProgressUpdate(Progress...)&lt;/code&gt; 的方法中来更新 UI 了。&lt;/li&gt;
&lt;li&gt;3.&lt;code&gt;onProgressUpdate(Progress...)&lt;/code&gt; 此方法将会在调用了 &lt;code&gt;publishProgress(Progress...)&lt;/code&gt; 后，由UI线程来调用。通常被用来在界面上显示执行的进度，例如，它可用于动画显示一个进度栏或在文本字段中显示日志。&lt;/li&gt;
&lt;li&gt;4.&lt;code&gt;onPostExecute(Result)&lt;/code&gt; 此方法在耗时操作执行完毕后，由UI线程调用。 &lt;code&gt;doInBackground（Params...）&lt;/code&gt; 中返回的结果将作为参数传递进来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;取消任务&quot;&gt;&lt;a href=&quot;#取消任务&quot; class=&quot;headerlink&quot; title=&quot;取消任务&quot;&gt;&lt;/a&gt;取消任务&lt;/h2&gt;&lt;p&gt;我们可以通过调用 &lt;code&gt;cancel(boolean)&lt;/code&gt; 在任何时候来取消异步任务。Invoking this method will cause subsequent calls to isCancelled() to return true. After invoking this method, onCancelled(Object), instead of onPostExecute(Object) will be invoked after doInBackground(Object[]) returns. To ensure that a task is cancelled as quickly as possible, you should always check the return value of isCancelled() periodically from doInBackground(Object[]), if possible (inside a loop for instance.)&lt;/p&gt;
&lt;h2 id=&quot;使用它，你需要遵守&quot;&gt;&lt;a href=&quot;#使用它，你需要遵守&quot; class=&quot;headerlink&quot; title=&quot;使用它，你需要遵守&quot;&gt;&lt;/a&gt;使用它，你需要遵守&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN.&lt;/li&gt;
&lt;li&gt;你必须在 UI 线程中创建任务实例。&lt;/li&gt;
&lt;li&gt;你必须在 UI 线程中调用 &lt;code&gt;execute(Params...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要手动调用 &lt;code&gt;onPreExecute()&lt;/code&gt;, &lt;code&gt;onPostExecute(Result)&lt;/code&gt;, &lt;code&gt;doInBackground(Params...)&lt;/code&gt;, &lt;code&gt;onProgressUpdate(Progress...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任务只能执行一次(如果你尝试调用第二次，将会抛出异常)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Memory-observability&quot;&gt;&lt;a href=&quot;#Memory-observability&quot; class=&quot;headerlink&quot; title=&quot;Memory observability&quot;&gt;&lt;/a&gt;Memory observability&lt;/h2&gt;&lt;p&gt;AsyncTask guarantees that all callback calls are synchronized in such a way that the following operations are safe without explicit synchronizations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set member fields in the constructor or onPreExecute(), and refer to them in doInBackground(Params…).&lt;/li&gt;
&lt;li&gt;Set member fields in doInBackground(Params…), and refer to them in onProgressUpdate(Progress…) and onPostExecute(Result).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;执行顺序&quot;&gt;&lt;a href=&quot;#执行顺序&quot; class=&quot;headerlink&quot; title=&quot;执行顺序&quot;&gt;&lt;/a&gt;执行顺序&lt;/h2&gt;&lt;p&gt;在第一次引入 &lt;code&gt;AsyncTask&lt;/code&gt; 时，内部实现使用串行执行单个后台线程。而从 &lt;code&gt;DONUT&lt;/code&gt;（甜甜圈）开始，这是更改为允许多个任务并行运行的线程池。从 &lt;code&gt;HONEYCOMB&lt;/code&gt;（蜂窝）开始，在单个线程上执行任务并行执行，以避免引起的常见的应用程序错误&lt;/p&gt;
&lt;p&gt;如果你真的需要并行执行, 你可以通过 &lt;code&gt;THREAD_POOL_EXECUTOR&lt;/code&gt; 来调用 &lt;code&gt;executeOnExecutor(java.util.concurrent.Executor, Object[])&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;本文参考：&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/reference/android/os/AsyncTask.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;AsyncTask 能够让我们不用操作 threads 和 handlers 的情况下，在 UI 线程中方便的执行耗时操作，并且返回结果到 UI 线程。&lt;/p&gt;
&lt;p&gt;AsyncTask 理论上被用来执行 &lt;em&gt;短时&lt;/em&gt;（通常情况下，只需几秒的操作）的操作。如果你需要长时间的执行某一操作，强烈推荐你使用 &lt;code&gt;java.util.concurrent&lt;/code&gt; 包下的 &lt;code&gt;Executor&lt;/code&gt;, &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; 和 &lt;code&gt;FutureTask&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;你在定义AsyncTask时需要定义三个泛型参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Called Params&lt;/strong&gt; - 传入的参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Progress&lt;/strong&gt;      - 执行中的参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;        - 返回值参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4 个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onPreExecute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doInBackground()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onProgressUpdate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onPostExecute()&lt;/code&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android AsyncTask" scheme="http://www.jiangbing.me/tags/Android-AsyncTask/"/>
    
  </entry>
  
  <entry>
    <title>关于 Android 中工作者线程的思考</title>
    <link href="http://www.jiangbing.me/2016/02/14/2016-02-14-think-in-the-worker-thread-of-android/"/>
    <id>http://www.jiangbing.me/2016/02/14/2016-02-14-think-in-the-worker-thread-of-android/</id>
    <published>2016-02-14T05:30:31.000Z</published>
    <updated>2016-05-14T07:18:24.038Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转自 &lt;a href=&quot;http://www.infoq.com/cn/articles/android-worker-thread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/android-worker-thread&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016030700.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Android中，我们或多或少使用了工作者线程，比如Thread，AsyncTask，HandlerThread，甚至是自己创建的线程池，使用工作者线程我们可以将耗时的操作从主线程中移走。然而在Android系统中为什么存在工作者线程呢，常用的工作者线程有哪些不易察觉的问题呢，关于工作者线程有哪些优化的方面呢，本文将一一解答这些问题。&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;工作者线程的存在原因：&lt;/strong&gt;&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;因为Android的UI单线程模型，所有的UI相关的操作都需要在主线程(UI线程)执行&lt;/li&gt;
&lt;li&gt;Android中各大组件的生命周期回调都是位于主线程中，使得主线程的职责更重&lt;/li&gt;
&lt;li&gt;如果不使用工作者线程为主线程分担耗时的任务，会造成应用卡顿，严重时可能出现ANR(Application Not Responding),即程序未响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因而，在Android中使用工作者线程显得势在必行，如一开始提到那样，在Android中工作者线程有很多，接下来我们将围绕AsyncTask，HandlerThread等深入研究。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;AsyncTask&quot;&gt;&lt;a href=&quot;#AsyncTask&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask&quot;&gt;&lt;/a&gt;AsyncTask&lt;/h2&gt;&lt;p&gt;AsyncTask是Android框架提供给开发者的一个辅助类，使用该类我们可以轻松的处理异步线程与主线程的交互，由于其便捷性，在Android工程中，AsyncTask被广泛使用。然而AsyncTask并非一个完美的方案，使用它往往会存在一些问题。接下来将逐一列举AsyncTask不容易被开发者察觉的问题。&lt;/p&gt;
&lt;h3 id=&quot;AsyncTask与内存泄露&quot;&gt;&lt;a href=&quot;#AsyncTask与内存泄露&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask与内存泄露&quot;&gt;&lt;/a&gt;AsyncTask与内存泄露&lt;/h3&gt;&lt;p&gt;内存泄露是Android开发中常见的问题，只要开发者稍有不慎就有可能导致程序产生内存泄露，严重时甚至可能导致OOM(OutOfMemory，即内存溢出错误)。AsyncTask也不例外，也有可能造成内存泄露。&lt;/p&gt;
&lt;p&gt;以一个简单的场景为例：&lt;br&gt;在Activity中，通常我们这样使用AsyncTask:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//In Activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AsyncTask&amp;lt;String, Void, Void&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Void &lt;span class=&quot;title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... params)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//some code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;.execute(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码使用的匿名内存类创建AsyncTask实例，然而在Java中，非静态内存类会隐式持有外部类的实例引用，上面例子AsyncTask创建于Activity中，因而会隐式持有Activity的实例引用。&lt;/p&gt;
&lt;p&gt;而在AsyncTask内部实现中,mFuture同样使用匿名内部类创建对象，而mFuture会作为执行任务加入到任务执行器中。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WorkerRunnable&amp;lt;Params, Result&amp;gt; mWorker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mFuture = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FutureTask&amp;lt;Result&amp;gt;(mWorker) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//some code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而mFuture加入任务执行器，实际上是放入了一个静态成员变量SERIAL_EXECUTOR指向的对象SerialExecutor的一个ArrayDeque类型的集合中。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Executor SERIAL_EXECUTOR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SerialExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SerialExecutor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt; mTasks = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Runnable r)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTasks.offer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//fake code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                r.run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当任务处于排队状态，则Activity实例引用被静态常量SERIAL_EXECUTOR 间接持有。&lt;/p&gt;
&lt;p&gt;在通常情况下，当设备发生屏幕旋转事件，当前的Activity被销毁，新的Activity被创建，以此完成对布局的重新加载。&lt;/p&gt;
&lt;p&gt;而本例中，当屏幕旋转时，处于排队的AsyncTask由于其对Activity实例的引用关系，导致这个Activity不能被销毁，其对应的内存不能被GC回收，因而就出现了内存泄露问题。&lt;/p&gt;
&lt;p&gt;关于如何避免内存泄露，我们可以使用&lt;strong&gt;静态内部类 + 弱引用&lt;/strong&gt;的形式解决。&lt;/p&gt;
&lt;h3 id=&quot;cancel的问题&quot;&gt;&lt;a href=&quot;#cancel的问题&quot; class=&quot;headerlink&quot; title=&quot;cancel的问题&quot;&gt;&lt;/a&gt;cancel的问题&lt;/h3&gt;&lt;p&gt;AsyncTask作为任务，是支持调用者取消任务的，即允许我们使用AsyncTask.canncel()方法取消提交的任务。然而其实cancel并非真正的起作用。&lt;/p&gt;
&lt;p&gt;首先，我们看一下cancel方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; mayInterruptIfRunning)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCancelled.set(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mFuture.cancel(mayInterruptIfRunning);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cancel方法接受一个boolean类型的参数，名称为mayInterruptIfRunning，意思是是否可以打断正在执行的任务。&lt;br&gt;&lt;br&gt;1.当我们调用cancel(false)，不打断正在执行的任务，对应的结果是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处于doInBackground中的任务不受影响，继续执行&lt;/li&gt;
&lt;li&gt;任务结束时不会去调用onPostExecute方法，而是执行onCancelled方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.当我们调用cancel(true)，表示打断正在执行的任务，会出现如下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果doInBackground方法处于阻塞状态，如调用Thread.sleep,wait等方法，则会抛出InterruptedException。&lt;/li&gt;
&lt;li&gt;对于某些情况下，有可能无法打断正在执行的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下，就是一个cancel方法无法打断正在执行的任务的例子:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AsyncTask&amp;lt;String,Void,Void&amp;gt; task = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AsyncTask&amp;lt;String, Void, Void&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Void &lt;span class=&quot;title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... params)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; loop = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(loop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(LOGTAG, &lt;span class=&quot;string&quot;&gt;&quot;doInBackground after interrupting the loop&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task.execute(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread.sleep(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//确保AsyncTask任务执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task.cancel(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的例子，如果想要使cancel正常工作需要在循环中，需要在循环条件里面同时检测isCancelled()才可以。&lt;/p&gt;
&lt;h3 id=&quot;串行带来的问题&quot;&gt;&lt;a href=&quot;#串行带来的问题&quot; class=&quot;headerlink&quot; title=&quot;串行带来的问题&quot;&gt;&lt;/a&gt;串行带来的问题&lt;/h3&gt;&lt;p&gt;Android团队关于AsyncTask执行策略进行了多次修改，修改大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自最初引入到Donut(1.6)之前，任务串行执行&lt;/li&gt;
&lt;li&gt;从Donut到GINGERBREAD_MR1(2.3.4),任务被修改成了并行执行&lt;/li&gt;
&lt;li&gt;从HONEYCOMB（3.0）至今，任务恢复至串行，但可以设置executeOnExecutor()实现并行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而AsyncTask的串行实际执行起来是这样的逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由串行执行器控制任务的初始分发&lt;/li&gt;
&lt;li&gt;并行执行器一次执行单个任务，并启动下一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在AsyncTask中，并发执行器实际为ThreadPoolExecutor的实例，其CORE_POOL_SIZE为当前设备CPU数量+1，MAXIMUM_POOL_SIZE值为CPU数量的2倍 + 1。&lt;/p&gt;
&lt;p&gt;以一个四核手机为例，当我们持续调用AsyncTask任务过程中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在AsyncTask线程数量小于CORE_POOL_SIZE(5个)时，会启动新的线程处理任务，不重用之前空闲的线程&lt;/li&gt;
&lt;li&gt;当数量超过CORE_POOL_SIZE(5个)，才开始重用之前的线程处理任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是由于AsyncTask属于默认线性执行任务，导致并发执行器总是处于某一个线程工作的状态，因而造成了ThreadPool中其他线程的浪费。同时由于AsyncTask中并不存在&lt;code&gt;allowCoreThreadTimeOut(boolean)&lt;/code&gt;的调用，所以ThreadPool中的核心线程即使处于空闲状态也不会销毁掉。&lt;/p&gt;
&lt;h2 id=&quot;Executors&quot;&gt;&lt;a href=&quot;#Executors&quot; class=&quot;headerlink&quot; title=&quot;Executors&quot;&gt;&lt;/a&gt;Executors&lt;/h2&gt;&lt;p&gt;Executors是Java API中一个快速创建线程池的工具类，然而在它里面也是存在问题的。&lt;/p&gt;
&lt;p&gt;以Executors中获取一个固定大小的线程池方法为例:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ExecutorService &lt;span class=&quot;title&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nThreads)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(nThreads, nThreads,&lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TimeUnit.MILLISECONDS,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面代码实现中，CORE_POOL_SIZE和MAXIMUM_POOL_SIZE都是同样的值，如果把nThreads当成核心线程数，则无法保证最大并发，而如果当做最大并发线程数，则会造成线程的浪费。因而Executors这样的API导致了我们无法在最大并发数和线程节省上做到平衡。&lt;/p&gt;
&lt;p&gt;为了达到最大并发数和线程节省的平衡，建议自行创建ThreadPoolExecutor，根据业务和设备信息确定CORE_POOL_SIZE和MAXIMUM_POOL_SIZE的合理值。&lt;/p&gt;
&lt;h2 id=&quot;HandlerThread&quot;&gt;&lt;a href=&quot;#HandlerThread&quot; class=&quot;headerlink&quot; title=&quot;HandlerThread&quot;&gt;&lt;/a&gt;HandlerThread&lt;/h2&gt;&lt;p&gt;HandlerThread是Android中提供特殊的线程类，使用这个类我们可以轻松创建一个带有Looper的线程，同时利用Looper我们可以结合Handler实现任务的控制与调度。以Handler的post方法为例，我们可以封装一个轻量级的任务处理器.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Handler mHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LightTaskManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HandlerThread workerThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HandlerThread(&lt;span class=&quot;string&quot;&gt;&quot;LightTaskThread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    workerThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler(workerThread.getLooper());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable run)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler.post(run);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postAtFrontOfQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable runnable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler.postAtFrontOfQueue(runnable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postDelayed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable runnable, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; delay)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler.postDelayed(runnable, delay);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postAtTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable runnable, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; time)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mHandler.postAtTime(runnable, time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在本例中，我们可以按照如下规则提交任务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;post&lt;/code&gt; 提交优先级一般的任务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postAtFrontOfQueue&lt;/code&gt; 将优先级较高的任务加入到队列前端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postAtTime&lt;/code&gt; 指定时间提交任务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postDelayed&lt;/code&gt; 延后提交优先级较低的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的轻量级任务处理器利用&lt;strong&gt;HandlerThread的单一线程 + 任务队列&lt;/strong&gt;的形式，可以处理类似本地IO（文件或数据库读取）的轻量级任务。在具体的处理场景下，可以参考如下做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于本地IO读取，并显示到界面，建议使用postAtFrontOfQueue&lt;/li&gt;
&lt;li&gt;对于本地IO写入，不需要通知界面，建议使用postDelayed&lt;/li&gt;
&lt;li&gt;一般操作，可以使用post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;线程优先级调整&quot;&gt;&lt;a href=&quot;#线程优先级调整&quot; class=&quot;headerlink&quot; title=&quot;线程优先级调整&quot;&gt;&lt;/a&gt;线程优先级调整&lt;/h2&gt;&lt;p&gt;在Android应用中，将耗时任务放入异步线程是一个不错的选择，那么为异步线程调整应有的优先级则是一件锦上添花的事情。众所周知，线程的并行通过CPU的时间片(这个时间片，让我想到了当时教我们《操作系统》的美女老师:-D)切换实现，对线程优先级调整，最主要的策略就是降低异步线程的优先级，从而使得主线程获得更多的CPU资源。&lt;/p&gt;
&lt;p&gt;Android中的线程优先级和Linux系统进程优先级有些类似，其值都是从-20至19（递减，-20优先级最大,19优先级最小）。其中Android中，开发者可以控制的优先级有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;THREAD_PRIORITY_DEFAULT&lt;/strong&gt;，默认的线程优先级，值为0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THREAD_PRIORITY_LOWEST&lt;/strong&gt;，最低的线程级别，值为19&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THREAD_PRIORITY_BACKGROUND&lt;/strong&gt; 后台线程建议设置这个优先级，值为10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THREAD_PRIORITY_MORE_FAVORABLE&lt;/strong&gt; 相对THREAD_PRIORITY_DEFAULT稍微优先，值为-1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THREAD_PRIORITY_LESS_FAVORABLE&lt;/strong&gt; 相对THREAD_PRIORITY_DEFAULT稍微落后一些，值为1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为线程设置优先级也比较简单，通用的做法是在run方法体的开始部分加入下列代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.os.Process.setThreadPriority(priority);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常设置优先级的规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般的工作者线程，设置成&lt;code&gt;THREAD_PRIORITY_BACKGROUND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于优先级很低的线程，可以设置&lt;code&gt;THREAD_PRIORITY_LOWEST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他特殊需求，视业务应用具体的优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在Android中工作者线程如此普遍，然而潜在的问题也不可避免，建议在开发者使用工作者线程时，从工作者线程的数量和优先级等方面进行审视，做到较为合理的使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转自 &lt;a href=&quot;http://www.infoq.com/cn/articles/android-worker-thread&quot;&gt;http://www.infoq.com/cn/articles/android-worker-thread&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016030700.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Android中，我们或多或少使用了工作者线程，比如Thread，AsyncTask，HandlerThread，甚至是自己创建的线程池，使用工作者线程我们可以将耗时的操作从主线程中移走。然而在Android系统中为什么存在工作者线程呢，常用的工作者线程有哪些不易察觉的问题呢，关于工作者线程有哪些优化的方面呢，本文将一一解答这些问题。&lt;/p&gt;
&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;工作者线程的存在原因：&lt;/strong&gt;&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;因为Android的UI单线程模型，所有的UI相关的操作都需要在主线程(UI线程)执行&lt;/li&gt;
&lt;li&gt;Android中各大组件的生命周期回调都是位于主线程中，使得主线程的职责更重&lt;/li&gt;
&lt;li&gt;如果不使用工作者线程为主线程分担耗时的任务，会造成应用卡顿，严重时可能出现ANR(Application Not Responding),即程序未响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因而，在Android中使用工作者线程显得势在必行，如一开始提到那样，在Android中工作者线程有很多，接下来我们将围绕AsyncTask，HandlerThread等深入研究。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Thread" scheme="http://www.jiangbing.me/tags/Android-Thread/"/>
    
  </entry>
  
  <entry>
    <title>Android 中的进程和线程</title>
    <link href="http://www.jiangbing.me/2016/02/11/2016-02-11-android-processes-and-threads/"/>
    <id>http://www.jiangbing.me/2016/02/11/2016-02-11-android-processes-and-threads/</id>
    <published>2016-02-11T05:30:31.000Z</published>
    <updated>2016-05-14T07:20:45.943Z</updated>
    
    <content type="html">&lt;p&gt;当android应用启动第一个组件后，系统会自动为这个分配一个新的Linux进程，这个进程中包含一个执行线程。默认情况下，同一个应用中的所有组件都运行在这个包含着主线程的进程中。也就是说，在创建一个新的组件时，系统还是会把它运行在已经分配好的这个进程中。当然，你也可以指定这些组件运行在不同的进程中，同时，你还可以为他们创建额外的线程。&lt;/p&gt;
&lt;p&gt;这篇博文，我们就来说说在Android应用中，进程和线程是如何来工作的。&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;前面已经说了，同一个应用中的所有组件都被分配在同一个进程中，而且你也不应该去改变这种做法。然而，如果你需要控制某一确定的组件的Proces，你可以在manifest文件中做特殊设置。Music播放器的Playback Service就可以这样做.&lt;/p&gt;
&lt;p&gt;manifest文件中记录着所有组件的节点，包括 &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;service&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;receiver&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;provider&amp;gt;&lt;/code&gt;.在这些节点中，你可以通过 &lt;code&gt;android:process&lt;/code&gt; 属性来指定这些组件应该运行在哪个进程中。你也可以通过 &lt;code&gt;android:process&lt;/code&gt; 将不同应用中的组件都运行在同一个进程中,这样它们就会拥有同一个Linux用户ID,并且用相同的证书签名。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt; 节点同样支持 android:process 属性，你可以为他指派一个默认的值，那么，这个值，就会应用于所有组件。&lt;/p&gt;
&lt;p&gt;当内存不足，或者另一个进程需要立即执行时，系统可能会 shut down 那些无用的进程。那么，被杀死的进程中组件也会被销毁。当这些组件再次工作时，所属进程也会被重新创建。&lt;/p&gt;
&lt;p&gt;有意思的是，系统在需要销毁进程时，会衡量这个进程对用户的重要性。比方说，相比一个活动的进程，系统更容易销毁一个不再屏幕上显示的进程。决定于一个进程是否终止，取决于该进程中组件的运行状态。&lt;/p&gt;
&lt;h2 id=&quot;进程的生命周期&quot;&gt;&lt;a href=&quot;#进程的生命周期&quot; class=&quot;headerlink&quot; title=&quot;进程的生命周期&quot;&gt;&lt;/a&gt;进程的生命周期&lt;/h2&gt;&lt;p&gt;Android系统尽可能的去维持一个应用的进程，除非是因为内存不足或者在内存不足的情况下需要创建更重要的进程。系统会把进程中存在正在运行的组件放在 &lt;em&gt;importance层&lt;/em&gt; ，而重要性最低的进程会首先被杀死，然后是下一个重要性最低的进程，当然，必要时，系统会恢复资源的。&lt;/p&gt;
&lt;p&gt;在 &lt;em&gt;importance层&lt;/em&gt; 有五种等级。下面从重要性从高到低的顺序来说说这五种等级的进程（下面第一个级别是最重要，也是最后被系统杀死的进程）：&lt;/p&gt;
&lt;h3 id=&quot;1-前台进程（Foreground-process）&quot;&gt;&lt;a href=&quot;#1-前台进程（Foreground-process）&quot; class=&quot;headerlink&quot; title=&quot;1.前台进程（Foreground process）&quot;&gt;&lt;/a&gt;1.前台进程（Foreground process）&lt;/h3&gt;&lt;p&gt;这个进程就是说用户当前正在使用的进程。下面这些情况，如果任何一种成立的话，我们都认为这个进程是前台进程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程中寄存一个正在与用户交互的 &lt;code&gt;activity&lt;/code&gt;(也就是，这个&lt;code&gt;activity&lt;/code&gt;已获取焦点，换句话说就是 &lt;code&gt;onResume()&lt;/code&gt; 已经被调用)&lt;/li&gt;
&lt;li&gt;进程中寄存了一个 &lt;code&gt;service&lt;/code&gt;,并且这个&lt;code&gt;service&lt;/code&gt;绑定在了一个正在与用户进行交互的&lt;code&gt;activity&lt;/code&gt;上&lt;/li&gt;
&lt;li&gt;进程中寄存了一个前台&lt;code&gt;service&lt;/code&gt;(该service已经调用了&lt;code&gt;startForeground()&lt;/code&gt;方法)&lt;/li&gt;
&lt;li&gt;进程中寄存了一个正在调用其生命周期方法(onCreate(), onStart(), onDestroy())的&lt;code&gt;service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程中寄存了一个广播接受者，并且其正在执行&lt;code&gt;onReceive()&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下，任何时候，只有少数前台进程存在。而它们被杀死也只是存在内存极低，以至于进程无法继续运行下去。&lt;/p&gt;
&lt;h3 id=&quot;2-可视化的进程（Visible-process）&quot;&gt;&lt;a href=&quot;#2-可视化的进程（Visible-process）&quot; class=&quot;headerlink&quot; title=&quot;2.可视化的进程（Visible process）&quot;&gt;&lt;/a&gt;2.可视化的进程（Visible process）&lt;/h3&gt;&lt;p&gt;此进程无任何前台组件，但用户还能够在屏幕上可见。下面这些情况，如果任何一种成立的话，我们都认为这个进程是可视化进程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程中寄存了一个前台activity,但是一直对用户是可见的（onPause()方法被调用）。&lt;/li&gt;
&lt;li&gt;寄存了一个绑定于可视的(或者前台)activity的&lt;code&gt;service&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;visible process是非常重要的，也只有在需要保证所有前台进程正常运行时，才有可能将其杀死。&lt;/p&gt;
&lt;h3 id=&quot;3-服务型进程（Service-process）&quot;&gt;&lt;a href=&quot;#3-服务型进程（Service-process）&quot; class=&quot;headerlink&quot; title=&quot;3.服务型进程（Service process）&quot;&gt;&lt;/a&gt;3.服务型进程（Service process）&lt;/h3&gt;&lt;p&gt;该进程运行着一个已经调用 &lt;code&gt;startService()&lt;/code&gt; 的service,并且does not fall into either of the two higher categories.虽然service进程用户看不见，但是他们通常做的工作时用户关心的事情（比如后台播放音乐，下载文件等），所以系统通常维持他们的运行，除非在保证所有的前台进程和可视化进程下内存不足。&lt;/p&gt;
&lt;h3 id=&quot;4-后台进程（Background-process）&quot;&gt;&lt;a href=&quot;#4-后台进程（Background-process）&quot; class=&quot;headerlink&quot; title=&quot;4.后台进程（Background process）&quot;&gt;&lt;/a&gt;4.后台进程（Background process）&lt;/h3&gt;&lt;p&gt;该进程寄存着一个当前状态下对用户不可见的activity(已经调用了 &lt;code&gt;onStop()&lt;/code&gt; 方法)。此类进程对用户没有直接影响，所以在需要为foreground, visible, service进程分配内存时，系统会在任何时候杀死此类进程以回收内存。通常情况下，有很多的后台进程在忙碌着，他们被保存在 LRU（least recently used） list中,最近被用户用到的也是最后一个被杀死的。如果activity实现生命周期方法，并且保存了其所属的状态信息，那么当该进程被杀死后对用户的体验是没有什么影响的，因为当用户重回这个activity时，activity将会还原所有的状态。具体如何使用，请查阅Google官方文档中，关于activity的信息保存和找回。&lt;/p&gt;
&lt;h3 id=&quot;5-空进程（Empty-process）&quot;&gt;&lt;a href=&quot;#5-空进程（Empty-process）&quot; class=&quot;headerlink&quot; title=&quot;5.空进程（Empty process）&quot;&gt;&lt;/a&gt;5.空进程（Empty process）&lt;/h3&gt;&lt;p&gt;该进程中没有任何活动的应用组件。这种进程被存活下来的唯一目的就是缓存了，已达到下一次在其中运行组件时减少启动时间。系统杀死它们经常是因为平衡进程缓存和底层内核缓存之间的系统资源。&lt;/p&gt;
&lt;p&gt;Android在对一个进程进行等级排名时，依据这个进程中当前活动组件的重要性，尽可能的分配最高等级。比如说，如果一个中寄存了一个service和一个visible activity,那么系统将这个进程认定为是一个visible process，而不是一个service process.&lt;/p&gt;
&lt;p&gt;另外, a process’s ranking might be increased because other processes are dependent on it—a process that is serving another process can never be ranked lower than the process it is serving. For example, if a content provider in process A is serving a client in process B, or if a service in process A is bound to a component in process B, process A is always considered at least as important as process B.&lt;/p&gt;
&lt;p&gt;因为一个执行service的进程的排名比一个后台activity的进程排名要高，所以，如果一个activity启动时要执行一段长时间的操作，应该选择使用Service而不是创建一个worker thread。例如，一个activity做上传图片的操作，应该选择启动一个Service做上传的动作。使用service能确保这个操作会至少有”service process”的优先级。&lt;/p&gt;
&lt;h2 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h2&gt;&lt;p&gt;当一个程序首次启动，系统会为这个程序创建一个“main thread”。这个线程非常重要，因为它将肩负起UI的控制调度，还包含绘制图像的事件。同时，它还是与UI相关的组件（来自android.widget与android.view下的组件）进行交互的中介。因此，有些时候main thread 也被成为“UI thread”.&lt;/p&gt;
&lt;p&gt;系统不会为每一个组件的实例创建单独的线程。所有运行在同一个进程中的组件都会在UI Thread中被实例化。系统调用组件与他们自身的回调函数都是运行在UI Thread的。&lt;/p&gt;
&lt;p&gt;例如，当用户点击屏幕上的一个button，程序的UI thread会把这个事件分发至button这个组件上，然后button会执行它的presss state并post an invalidate请求到事件队列中。UI thread然后从事件队列中取出消息并通知组件进行重绘。&lt;/p&gt;
&lt;p&gt;当你的app执行一个比较重的工作时，单线程模式有可能会卡到UI。特别是，在UI线程里面做网络请求操作或者是db查询会严重卡到整个UI。当UI thread被阻塞时，没有事件能够继续被分发，包括绘制事件。那么在用户看来，这样的程序是糟糕的。更糟糕的是，如果UI线程被阻塞超过5秒，程序会就出现ANR的错误提示。那么用户可能会决定退出程序，并对该程序进行卸载。&lt;/p&gt;
&lt;p&gt;另外，Andoid的UI组件不是thread-safe的。因此，你不应该在另外一个线程去操控UI组件。有两个原则需要遵守：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要阻塞UI线程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要在UI线程之外访问UI组件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Worker-threads&quot;&gt;&lt;a href=&quot;#Worker-threads&quot; class=&quot;headerlink&quot; title=&quot;Worker threads&quot;&gt;&lt;/a&gt;Worker threads&lt;/h3&gt;&lt;p&gt;为了实现执行耗时的操作，你应该确保哪些动作执行在另外一个线程(“background” or “worker” threads)。&lt;/p&gt;
&lt;p&gt;例如，下面的代码演示了点击事件后开启另外一个线程来下载并显示图片的操作：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Bitmap b = loadImageFromNetwork(&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/image.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mImageView.setImageBitmap(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的例子看起来没有问题，实际上违法了第二条规则：不要在UI线程之外访问UI组件。 Android提供了下面三个方法来解决这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity.runOnUiThread(Runnable)&lt;/li&gt;
&lt;li&gt;View.post(Runnable)&lt;/li&gt;
&lt;li&gt;View.postDelayed(Runnable, long)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如下面就是使用View.post的方式实现的代码示例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Bitmap bitmap = loadImageFromNetwork(&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/image.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mImageView.post(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mImageView.setImageBitmap(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码虽然实现了功能，可是当系统变复杂时，会显得不好处理。也许我们可以考虑使用Handler，但是更好的方案也许是使用AsyncTask。&lt;/p&gt;
&lt;h3 id=&quot;使用AsyncTask&quot;&gt;&lt;a href=&quot;#使用AsyncTask&quot; class=&quot;headerlink&quot; title=&quot;使用AsyncTask&quot;&gt;&lt;/a&gt;使用AsyncTask&lt;/h3&gt;&lt;p&gt;关于什么是AsyncTask与如何使用&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncTask&lt;/a&gt;，不再赘述。 下面是使用AsyncTask来实现上面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DownloadImageTask().execute(&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/image.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DownloadImageTask&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Void&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Bitmap&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** The system calls this to perform work in a worker thread and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      * delivers it the parameters given to AsyncTask.execute() */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... urls)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; loadImageFromNetwork(urls[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** The system calls this to perform work in the UI thread and delivers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      * the result from doInBackground() */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bitmap result)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mImageView.setImageBitmap(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Thread-safe-methods&quot;&gt;&lt;a href=&quot;#Thread-safe-methods&quot; class=&quot;headerlink&quot; title=&quot;Thread-safe methods&quot;&gt;&lt;/a&gt;Thread-safe methods&lt;/h3&gt;&lt;p&gt;在某些情况下，你实现的一些方法有可能会被不止一个线程中执行到，因此这些方法必须是线程安全的。&lt;/p&gt;
&lt;p&gt;在bound service的情况下，回调函数通常都需要是线程安全的。如果IBinder的Client与Server是在同一进程的话，那么被Client调用的方法是执行在Client的线程当中的。然而如果Client是在另外一个进程的话，被调用的方法则是执行在来自系统为Server端维护的一个线程池当中的某个线程中（非UI Thread）。例如，既然Service的onBind()的方法可以被service进程的UI线程所调用执行，那么onBind所返回的对象（Client端）所实现的方法则可以被线程池中的线程所调用执行。因为一个service可以拥有多个client，那么在同一时刻可以有不止一个线程可以占用同一个IBinder的回调函数。所以IBinder的方法必须是线程安全的。&lt;/p&gt;
&lt;p&gt;同样的，一个content provider可以接受来自另外一个进程的数据请求。尽管ContentResolver与ContentProvider类隐藏了实现细节，但是ContentProvider所提供的query()，insert()，delete()，update()与getType()都是在content provider进程的线程池中被调用执行的，而不是进程的主线程中。因为那些方法可能同时被多个线程所调用，所以他们都应该是线程安全的。&lt;/p&gt;
&lt;h3 id=&quot;进程间的通信（Interprocess-Communication）&quot;&gt;&lt;a href=&quot;#进程间的通信（Interprocess-Communication）&quot; class=&quot;headerlink&quot; title=&quot;进程间的通信（Interprocess Communication）&quot;&gt;&lt;/a&gt;进程间的通信（Interprocess Communication）&lt;/h3&gt;&lt;p&gt;Android提供了为远程过程调用（RPC）提供了一种进程间通信（IPC）的机制。调用发生在activity或者其他组件中，执行却在另外一个进程，最后再把结果返回给调用者。这需要把调用的数据解析成操作系统能够识别的格式，解码，传递，再编码返回。Android提供了IPC交互的实现细节，因此我们只需要专注于定义与实现RPC接口。&lt;/p&gt;
&lt;p&gt;为了执行IPC，你的程序必须通过bindService()方法绑定到service上，更多细节，请查看&lt;a href=&quot;http://developer.android.com/guide/components/services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Services文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文参考：&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/components/processes-and-threads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/guide/components/processes-and-threads.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当android应用启动第一个组件后，系统会自动为这个分配一个新的Linux进程，这个进程中包含一个执行线程。默认情况下，同一个应用中的所有组件都运行在这个包含着主线程的进程中。也就是说，在创建一个新的组件时，系统还是会把它运行在已经分配好的这个进程中。当然，你也可以指定这些组件运行在不同的进程中，同时，你还可以为他们创建额外的线程。&lt;/p&gt;
&lt;p&gt;这篇博文，我们就来说说在Android应用中，进程和线程是如何来工作的。&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;前面已经说了，同一个应用中的所有组件都被分配在同一个进程中，而且你也不应该去改变这种做法。然而，如果你需要控制某一确定的组件的Proces，你可以在manifest文件中做特殊设置。Music播放器的Playback Service就可以这样做.&lt;/p&gt;
&lt;p&gt;manifest文件中记录着所有组件的节点，包括 &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;service&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;receiver&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;provider&amp;gt;&lt;/code&gt;.在这些节点中，你可以通过 &lt;code&gt;android:process&lt;/code&gt; 属性来指定这些组件应该运行在哪个进程中。你也可以通过 &lt;code&gt;android:process&lt;/code&gt; 将不同应用中的组件都运行在同一个进程中,这样它们就会拥有同一个Linux用户ID,并且用相同的证书签名。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.jiangbing.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android Process" scheme="http://www.jiangbing.me/tags/Android-Process/"/>
    
      <category term="Android Thread" scheme="http://www.jiangbing.me/tags/Android-Thread/"/>
    
  </entry>
  
  <entry>
    <title>【Guitar 弹唱】连衣裙</title>
    <link href="http://www.jiangbing.me/2016/02/10/2016-02-10-guitar-lian-yi-qun/"/>
    <id>http://www.jiangbing.me/2016/02/10/2016-02-10-guitar-lian-yi-qun/</id>
    <published>2016-02-10T01:35:00.000Z</published>
    <updated>2016-05-14T07:25:04.684Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;宋冬野-《连衣裙》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/YsVUY-1em8E/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宋冬野-《连衣裙》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;embed src=&quot;http://www.tudou.com/v/YsVUY-1em8E/&amp;bid=05&amp;rpid=816991464&amp;resourceId=816991464_05_05_99/v.swf&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; wmode=&quot;opaque&quot; width=&quot;480&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="http://www.jiangbing.me/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="Guitar" scheme="http://www.jiangbing.me/tags/Guitar/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义控件(四)</title>
    <link href="http://www.jiangbing.me/2016/02/07/2016-02-07-how-can-we-create-a-custom-view4/"/>
    <id>http://www.jiangbing.me/2016/02/07/2016-02-07-how-can-we-create-a-custom-view4/</id>
    <published>2016-02-07T07:38:40.000Z</published>
    <updated>2016-05-14T07:27:04.034Z</updated>
    
    <content type="html">&lt;p&gt;前几篇博文我们已经了解如何创建设计良好的View，并且能够使之在手势与状态切换时得到正确的反馈。下面要介绍的是如何使得view能够执行更快。为了避免UI显得卡顿，你必须确保动画能够保持在60fps。&lt;/p&gt;
&lt;h2 id=&quot;去除冗余的代码&quot;&gt;&lt;a href=&quot;#去除冗余的代码&quot; class=&quot;headerlink&quot; title=&quot;去除冗余的代码&quot;&gt;&lt;/a&gt;去除冗余的代码&lt;/h2&gt;&lt;p&gt;为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。&lt;/p&gt;
&lt;p&gt;你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了&lt;code&gt;invalidate()&lt;/code&gt;.因此请尽量减少调用&lt;code&gt;invaildate()&lt;/code&gt;的次数。如果可能的话，尽量调用含有4个参数的&lt;code&gt;invalidate()&lt;/code&gt;方法而不是没有参数的&lt;code&gt;invalidate()&lt;/code&gt;。没有参数的invalidate会强制重绘整个view。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;另外一个非常耗时的操作是请求layout。任何时候执行&lt;code&gt;requestLayout()&lt;/code&gt;，会使得Android UI系统去遍历整个View的层级来计算出每一个view的大小。如果找到有冲突的值，它会需要重新计算好几次。另外需要尽量保持View的层级是扁平化的，这样对提高效率很有帮助。&lt;/p&gt;
&lt;p&gt;如果你有一个复杂的UI，你应该考虑写一个自定义的&lt;strong&gt;ViewGroup&lt;/strong&gt;来执行他的layout操作。与内置的view不同，自定义的view可以使得程序仅仅测量这一部分，这避免了遍历整个view的层级结构来计算大小。这个PieChart 例子展示了如何继承ViewGroup作为自定义view的一部分。PieChart 有子views，但是它从来不测量它们。而是根据他自身的layout法则，直接设置它们的大小。&lt;/p&gt;
&lt;h2 id=&quot;使用硬件加速&quot;&gt;&lt;a href=&quot;#使用硬件加速&quot; class=&quot;headerlink&quot; title=&quot;使用硬件加速&quot;&gt;&lt;/a&gt;使用硬件加速&lt;/h2&gt;&lt;p&gt;从Android 3.0开始，Android的2D图像系统可以通过GPU (Graphics Processing Unit))来加速。GPU硬件加速可以提高许多程序的性能。但是这并不是说它适合所有的程序。Android framework让你能过随意控制你的程序的各个部分是否启用硬件加速。&lt;/p&gt;
&lt;p&gt;参考 Android Developers Guide 中的&lt;a href=&quot;http://developer.android.com/guide/topics/graphics/hardware-accel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hardware Acceleration&lt;/a&gt; 来学习如何在application, activity, 或 window 层启用加速。注意除了 Android Guide 的指导之外，你必须要设置你的应用的target API为11，或更高，通过在你的AndroidManifest.xml 文件中增加 &amp;lt; uses-sdk android:targetSdkVersion=”11”/&amp;gt; 。&lt;/p&gt;
&lt;p&gt;一旦你开启了硬件加速，性能的提示并不一定可以明显察觉到。移动设备的GPU在某些例如scaling,rotating与translating的操作中表现良好。但是对其他一些任务，比如画直线或曲线，则表现不佳。为了充分发挥GPU加速，你应该最大化GPU擅长的操作的数量，最小化GPU不擅长操作的数量。&lt;/p&gt;
&lt;p&gt;在下面的例子中，绘制pie是相对来说比较费时的。解决方案是把pie放到一个子view中，并设置View使用LAYER_TYPE_HARDWARE来进行加速。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PieView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;View&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PieView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isInEditMode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               setLayerType(View.LAYER_TYPE_HARDWARE, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Canvas canvas)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onDraw(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Item it : mData) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               mPiePaint.setShader(it.mShader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               canvas.drawArc(mBounds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt; - it.mEndAngle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       it.mEndAngle - it.mStartAngle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, mPiePaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSizeChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldw, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldh)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RectF(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, w, h);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       RectF mBounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这样的修改以后，PieChart.PieView.onDraw()只会在第一次现实的时候被调用。之后，pie chart会被缓存为一张图片，并通过GPU来进行重画不同的角度。GPU特别擅长这类的事情，并且表现效果突出。&lt;/p&gt;
&lt;p&gt;缓存图片到hardware layer会消耗video memory，而video memory又是有限的。基于这样的考虑，仅仅在用户触发scrolling的时候使用&lt;code&gt;LAYER_TYPE_HARDWARE&lt;/code&gt;，在其他时候，使用&lt;code&gt;LAYER_TYPE_NONE&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;http://http://developer.android.com/training/custom-view/make-interactive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/custom-view/make-interactive.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几篇博文我们已经了解如何创建设计良好的View，并且能够使之在手势与状态切换时得到正确的反馈。下面要介绍的是如何使得view能够执行更快。为了避免UI显得卡顿，你必须确保动画能够保持在60fps。&lt;/p&gt;
&lt;h2 id=&quot;去除冗余的代码&quot;&gt;&lt;a href=&quot;#去除冗余的代码&quot; class=&quot;headerlink&quot; title=&quot;去除冗余的代码&quot;&gt;&lt;/a&gt;去除冗余的代码&lt;/h2&gt;&lt;p&gt;为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。&lt;/p&gt;
&lt;p&gt;你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了&lt;code&gt;invalidate()&lt;/code&gt;.因此请尽量减少调用&lt;code&gt;invaildate()&lt;/code&gt;的次数。如果可能的话，尽量调用含有4个参数的&lt;code&gt;invalidate()&lt;/code&gt;方法而不是没有参数的&lt;code&gt;invalidate()&lt;/code&gt;。没有参数的invalidate会强制重绘整个view。&lt;br&gt;
    
    </summary>
    
      <category term="Android 自定义控件" scheme="http://www.jiangbing.me/categories/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android 自定义控件" scheme="http://www.jiangbing.me/tags/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义控件(三)</title>
    <link href="http://www.jiangbing.me/2016/02/06/2016-02-06-how-can-we-create-a-custom-view3/"/>
    <id>http://www.jiangbing.me/2016/02/06/2016-02-06-how-can-we-create-a-custom-view3/</id>
    <published>2016-02-06T06:48:12.000Z</published>
    <updated>2016-05-14T07:27:10.653Z</updated>
    
    <content type="html">&lt;p&gt;上一篇中说到了自定义view的绘制，这一节中我们将探讨自定义view的响应事件。&lt;/p&gt;
&lt;p&gt;绘制UI仅仅是创建自定义View的一部分。你还需要使得你的View能够以模拟现实世界的方式来进行反馈。对象应该总是与现实情景能够保持一致。例如，图片不应该突然消失又从另外一个地方出现，因为在现实世界里面不会发生那样的事情。正确的应该是，图片从一个地方移动到另外一个地方。&lt;/p&gt;
&lt;p&gt;用户应该可以感受到UI上的微小变化，并对模仿现实世界的细微之处反应强烈。例如，当用户迅速滑动一个对象时，应该在开始时感到摩擦带来的阻力，在结束时感到滑动带动的动力。应该在滑动开始与结束的时候给用户一定的反馈。&lt;/p&gt;
&lt;p&gt;这节课会演示如何使用Android framework层的功能来为自定义的View添加那些现实世界中的行为。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理输入的手势&quot;&gt;&lt;a href=&quot;#处理输入的手势&quot; class=&quot;headerlink&quot; title=&quot;处理输入的手势&quot;&gt;&lt;/a&gt;处理输入的手势&lt;/h2&gt;&lt;p&gt;像许多其他UI框架一样，Android提供一个输入事件模型。用户的动作会转换成触发一些回调函数的事件，你可以重写这些回调方法来定制你的程序应该如何响应用户的输入事件。在Android中最常用的输入事件是touch，它会触发&lt;code&gt;onTouchEvent(android.view.MotionEvent)&lt;/code&gt;的回调。重写这个方法来处理touch事件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Touch事件本身并不是特别有用。如今的touch UI定义了&lt;code&gt;touch&lt;/code&gt;事件之间的相互作用，叫做&lt;code&gt;gestures&lt;/code&gt;。例如&lt;code&gt;tapping&lt;/code&gt;,&lt;code&gt;pulling&lt;/code&gt;,&lt;code&gt;flinging&lt;/code&gt;与&lt;code&gt;zooming&lt;/code&gt;。为了把那些&lt;code&gt;touch&lt;/code&gt;的源事件转换成&lt;code&gt;gestures&lt;/code&gt;, Android提供了&lt;code&gt;GestureDetector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过传入&lt;code&gt;GestureDetector.OnGestureListener&lt;/code&gt;的一个实例构建一个&lt;code&gt;GestureDetector&lt;/code&gt;。如果你只是想要处理几种gestures(手势操作)你可以继承&lt;code&gt;GestureDetector.SimpleOnGestureListener&lt;/code&gt;，而不用实现&lt;code&gt;GestureDetector.OnGestureListener&lt;/code&gt;接口。例如，下面的代码创建一个继承&lt;code&gt;GestureDetector.SimpleOnGestureListener&lt;/code&gt;的类，并重写&lt;code&gt;onDown(MotionEvent)&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mListener&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GestureDetector&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;SimpleOnGestureListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mDetector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GestureDetector(PieChart.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getContext(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mListener());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不管你是否使用&lt;code&gt;GestureDetector.SimpleOnGestureListener&lt;/code&gt;, 你必须总是实现&lt;code&gt;onDown()&lt;/code&gt;方法，并返回&lt;code&gt;true&lt;/code&gt;。这一步是必须的，因为所有的gestures都是从&lt;code&gt;onDown()&lt;/code&gt;开始的。&lt;strong&gt;如果你在onDown()里面返回false，系统会认为你想要忽略后续的gesture&lt;/strong&gt;,那么GestureDetector.OnGestureListener的其他回调方法就不会被执行到了。一旦你实现了GestureDetector.OnGestureListener并且创建了GestureDetector的实例, 你可以使用你的GestureDetector来中止你在onTouchEvent里面收到的touch事件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result = mDetector.onTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.getAction() == MotionEvent.ACTION_UP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           stopScrolling();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           result = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你传递一个touch事件到&lt;code&gt;onTouchEvent()&lt;/code&gt;时，若这个事件没有被辨认出是何种gesture，它会返回&lt;code&gt;false&lt;/code&gt;。你可以执行自定义的&lt;code&gt;gesture-decection&lt;/code&gt;代码。&lt;/p&gt;
&lt;h2 id=&quot;创建基本合理的物理运动&quot;&gt;&lt;a href=&quot;#创建基本合理的物理运动&quot; class=&quot;headerlink&quot; title=&quot;创建基本合理的物理运动&quot;&gt;&lt;/a&gt;创建基本合理的物理运动&lt;/h2&gt;&lt;p&gt;Gestures是控制触摸设备的一种强有力的方式，但是除非你能够产出一个合理的触摸反馈，否则将是违反用户直觉的。一个很好的例子是滑动手势，用户迅速的在屏幕上移动手指然后抬手离开屏幕。这个手势应该使得UI迅速的按照滑动的方向进行滑动，然后慢慢停下来，就像是用户旋转一个飞轮一样。&lt;/p&gt;
&lt;p&gt;但是模拟这个飞轮的感觉并不简单，要想得到正确的飞轮模型，需要大量的物理，数学知识。幸运的是，Android有提供帮助类来模拟这些物理行为。&lt;strong&gt;Scroller&lt;/strong&gt;是控制飞轮式的滑动的基类。&lt;/p&gt;
&lt;p&gt;要启动一个fling，需调用&lt;code&gt;fling()&lt;/code&gt;，并传入启动速率、x、y的最小值和最大值，对于启动速度值，可以使用&lt;code&gt;GestureDetector&lt;/code&gt;计算得出。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFling&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent e1, MotionEvent e2, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; velocityX, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; velocityY)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mScroller.fling(currentX, currentY, velocityX / SCALE, velocityY / SCALE, minX, minY, maxX, maxY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   postInvalidate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：尽管速率是通过GestureDetector来计算的，许多开发者感觉使用这个值使得fling动画太快。通常把x与y设置为4到8倍的关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调用&lt;code&gt;fling()&lt;/code&gt;时会为fling手势设置物理模型。然后，通过调用定期调用 &lt;code&gt;Scroller.computeScrollOffset()&lt;/code&gt;来更新&lt;code&gt;Scroller.computeScrollOffset()&lt;/code&gt;通过读取当前时间和使用物理模型来计算x和y的位置更新Scroller对象的内部状态。调用&lt;code&gt;getCurrX()&lt;/code&gt;和&lt;code&gt;getCurrY()&lt;/code&gt;来获取这些值。&lt;/p&gt;
&lt;p&gt;大多数view通过Scroller对象的x,y的位置直接到scrollTo())，PieChart例子稍有不同，它使用当前滚动y的位置设置图表的旋转角度。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!mScroller.isFinished()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mScroller.computeScrollOffset();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setPieRotation(mScroller.getCurrY());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Scroller 类会为你计算滚动位置，但是他不会自动把哪些位置运用到你的view上面。你有责任确保View获取并运用到新的坐标。你有两种方法来实现这件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在调用&lt;code&gt;fling()&lt;/code&gt;之后执行&lt;code&gt;postInvalidate()&lt;/code&gt;, 这是为了确保能强制进行重画。这个技术需要每次在onDraw里面计算过scroll offsets(滚动偏移量)之后调用&lt;code&gt;postInvalidate()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用ValueAnimator在fling是展现动画，并且通过调用&lt;code&gt;addUpdateListener()&lt;/code&gt;增加对fling过程的监听。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个PieChart 的例子使用了第二种方法。这个方法使用起来会稍微复杂一点，但是它更有效率并且避免了不必要的重画的view进行重绘。缺点是ValueAnimator是从API Level 11才有的。因此他不能运用到3.0的系统之前的版本上.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： ValueAnimator虽然是API 11才有的，但是你还是可以在最低版本低于3.0的系统上使用它，做法是在运行时判断当前的API Level，如果低于11则跳过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mScroller = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scroller(getContext(), &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mScrollAnimator = ValueAnimator.ofFloat(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mScrollAnimator.addUpdateListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ValueAnimator.AnimatorUpdateListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onAnimationUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ValueAnimator valueAnimator)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!mScroller.isFinished()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mScroller.computeScrollOffset();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setPieRotation(mScroller.getCurrY());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mScrollAnimator.cancel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onScrollFinished();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;过渡平滑&quot;&gt;&lt;a href=&quot;#过渡平滑&quot; class=&quot;headerlink&quot; title=&quot;过渡平滑&quot;&gt;&lt;/a&gt;过渡平滑&lt;/h2&gt;&lt;p&gt;用户期待一个UI之间的切换是能够平滑过渡的。UI元素需要做到渐入淡出来取代突然出现与消失。Android从3.0开始有提供&lt;a href=&quot;http://developer.android.com/guide/topics/graphics/prop-animation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;property animation framework&lt;/a&gt;,用来使得平滑过渡变得更加容易。&lt;/p&gt;
&lt;p&gt;使用这套动画系统时，任何时候属性的改变都会影响到你的视图，所以不要直接改变属性的值。而是使用&lt;strong&gt;ValueAnimator&lt;/strong&gt;来实现改变。在下面的例子中，在PieChart 中更改选择的部分将导致整个图表的旋转，以至选择的进入选择区内。&lt;strong&gt;ValueAnimator&lt;/strong&gt;在数百毫秒内改变旋转量，而不是突然地设置新的旋转值。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mAutoCenterAnimator = ObjectAnimator.ofInt(PieChart.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;PieRotation&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mAutoCenterAnimator.setIntValues(targetAngle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mAutoCenterAnimator.setDuration(AUTOCENTER_ANIM_DURATION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mAutoCenterAnimator.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想改变的是view的某些基础属性，你可以使用&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewPropertyAnimator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewPropertyAnimator&lt;/a&gt; ,它能够同时执行多个属性的动画。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;animate().rotation(targetAngle).setDuration(ANIM_DURATION).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;http://http://developer.android.com/training/custom-view/make-interactive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/custom-view/make-interactive.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中说到了自定义view的绘制，这一节中我们将探讨自定义view的响应事件。&lt;/p&gt;
&lt;p&gt;绘制UI仅仅是创建自定义View的一部分。你还需要使得你的View能够以模拟现实世界的方式来进行反馈。对象应该总是与现实情景能够保持一致。例如，图片不应该突然消失又从另外一个地方出现，因为在现实世界里面不会发生那样的事情。正确的应该是，图片从一个地方移动到另外一个地方。&lt;/p&gt;
&lt;p&gt;用户应该可以感受到UI上的微小变化，并对模仿现实世界的细微之处反应强烈。例如，当用户迅速滑动一个对象时，应该在开始时感到摩擦带来的阻力，在结束时感到滑动带动的动力。应该在滑动开始与结束的时候给用户一定的反馈。&lt;/p&gt;
&lt;p&gt;这节课会演示如何使用Android framework层的功能来为自定义的View添加那些现实世界中的行为。&lt;br&gt;
    
    </summary>
    
      <category term="Android 自定义控件" scheme="http://www.jiangbing.me/categories/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android" scheme="http://www.jiangbing.me/tags/Android/"/>
    
      <category term="Android 自定义控件" scheme="http://www.jiangbing.me/tags/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
</feed>
